workflows:
  optibuy:
    name: OptiBuy - Keystore Detective & Upload Key Match
    max_build_duration: 90
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
        ANDROID_SDK_ROOT: /usr/local/share/android-sdk
        ANDROID_HOME: /usr/local/share/android-sdk
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
        EXPECTED_FINGERPRINT: "80:71:B8:94:5A:40:B2:83:2C:99:3C:9E:E1:3D:E6:2A:D3:71:4E:50"
    scripts:
      - name: Keystore Detective - Find Matching Certificate
        script: |
          echo "=== KEYSTORE DETECTIVE: Finding Upload Key Match ==="
          echo "Target fingerprint: $EXPECTED_FINGERPRINT"
          
          # Array of common passwords
          PASSWORDS=("android" "optibuy" "optibuy123" "password" "123456" "optibuy_upload_2025" "release" "key" "debug" "test" "admin" "upload" "keystore" "store" "pass")
          
          # Array of common aliases
          ALIASES=("upload" "release" "key" "key0" "androiddebugkey" "optibuy" "debug" "alias1" "mykey" "app" "android")
          
          KEYSTORE_FOUND=false
          WORKING_PASSWORD=""
          WORKING_ALIAS=""
          
          # Test repository keystore
          if [ -f "attached_assets/release-key_1754548130465.keystore" ]; then
              echo "Testing repository keystore: attached_assets/release-key_1754548130465.keystore"
              
              for password in "${PASSWORDS[@]}"; do
                  for alias in "${ALIASES[@]}"; do
                      echo -n "Testing password='$password', alias='$alias'... "
                      
                      FINGERPRINT=$(keytool -list -v -keystore attached_assets/release-key_1754548130465.keystore -storepass "$password" -alias "$alias" 2>/dev/null | grep "SHA1:" | head -1 | awk '{print $2}' || echo "")
                      
                      if [ ! -z "$FINGERPRINT" ]; then
                          echo "SUCCESS! Found fingerprint: $FINGERPRINT"
                          
                          if [ "$FINGERPRINT" = "$EXPECTED_FINGERPRINT" ]; then
                              echo "🎉 PERFECT MATCH! This is the correct keystore!"
                              KEYSTORE_FOUND=true
                              WORKING_PASSWORD="$password"
                              WORKING_ALIAS="$alias"
                              cp attached_assets/release-key_1754548130465.keystore ./working-keystore.jks
                              break 2
                          else
                              echo "Different fingerprint, continuing search..."
                          fi
                      else
                          echo "Failed"
                      fi
                  done
              done
          else
              echo "Repository keystore not found"
          fi
          
          # If perfect match not found, test other AAB files to extract certificates
          if [ "$KEYSTORE_FOUND" = "false" ]; then
              echo "=== Testing Existing AAB Files for Certificate Extraction ==="
              
              # Create a list of existing AAB files
              AAB_FILES=("attached_assets/app-release*.aab" "attached_assets/optibuy-*.aab" "attached_assets/release*.aab")
              
              for aab_pattern in "${AAB_FILES[@]}"; do
                  for aab_file in $aab_pattern; do
                      if [ -f "$aab_file" ]; then
                          echo "Analyzing AAB: $aab_file"
                          
                          # Extract and analyze certificates from AAB
                          mkdir -p temp_aab_extract
                          cd temp_aab_extract
                          unzip -q "../$aab_file" 2>/dev/null || echo "Failed to extract $aab_file"
                          
                          # Look for certificate files
                          if [ -f "META-INF/CERT.RSA" ]; then
                              echo "Found certificate in $aab_file"
                              keytool -printcert -file META-INF/CERT.RSA 2>/dev/null | grep "SHA1:" && echo "Certificate found in $aab_file"
                          fi
                          
                          cd ..
                          rm -rf temp_aab_extract
                      fi
                  done
              done
          fi
          
          # Generate final report
          echo "=== KEYSTORE DETECTIVE REPORT ==="
          if [ "$KEYSTORE_FOUND" = "true" ]; then
              echo "✅ SUCCESS: Found matching keystore!"
              echo "Password: $WORKING_PASSWORD"
              echo "Alias: $WORKING_ALIAS"
              echo "Fingerprint: $EXPECTED_FINGERPRINT"
              echo "Keystore: working-keystore.jks"
          else
              echo "❌ FAILED: No matching keystore found"
              echo "Recommendation: Request second upload key reset from Google Play Support"
              
              # Create new keystore as fallback
              echo "Creating fallback keystore for second upload key reset request..."
              keytool -genkeypair \
                -alias upload \
                -keyalg RSA \
                -keysize 2048 \
                -validity 9125 \
                -keystore fallback-keystore.jks \
                -dname "CN=OptiBuy Collective, OU=Mobile Apps, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" \
                -storepass optibuy_upload_2025 \
                -keypass optibuy_upload_2025
              
              FALLBACK_FINGERPRINT=$(keytool -list -v -keystore fallback-keystore.jks -storepass optibuy_upload_2025 -alias upload | grep "SHA1:" | head -1 | awk '{print $2}')
              echo "Fallback fingerprint for support request: $FALLBACK_FINGERPRINT"
              
              WORKING_PASSWORD="optibuy_upload_2025"
              WORKING_ALIAS="upload"
              cp fallback-keystore.jks working-keystore.jks
          fi
          
          # Export environment variables for next step
          echo "export KEYSTORE_PASSWORD='$WORKING_PASSWORD'" > keystore_config.sh
          echo "export KEYSTORE_ALIAS='$WORKING_ALIAS'" >> keystore_config.sh
          echo "export KEYSTORE_FOUND='$KEYSTORE_FOUND'" >> keystore_config.sh
          
      - name: Build AAB with Detected/Fallback Keystore
        script: |
          echo "=== Building AAB with Optimal Keystore ==="
          source keystore_config.sh
          
          echo "Using keystore configuration:"
          echo "Password: $KEYSTORE_PASSWORD"
          echo "Alias: $KEYSTORE_ALIAS"
          echo "Perfect match found: $KEYSTORE_FOUND"
          
          # Create Android project structure
          mkdir -p OptiBuy/android/app/src/main/java/com/optibuy/collective
          mkdir -p OptiBuy/android/app/src/main/res/values
          mkdir -p OptiBuy/android/app/src/main/res/layout
          mkdir -p OptiBuy/android/app/src/main/res/mipmap-hdpi
          mkdir -p OptiBuy/android/app/src/main/res/mipmap-mdpi
          mkdir -p OptiBuy/android/app/src/main/res/mipmap-xhdpi
          mkdir -p OptiBuy/android/app/src/main/res/mipmap-xxhdpi
          mkdir -p OptiBuy/android/app/src/main/res/mipmap-xxxhdpi
          mkdir -p OptiBuy/android/gradle/wrapper
          
          cd OptiBuy
          
          # Copy the working keystore
          cp ../working-keystore.jks android/app/upload-keystore.jks
          
          # Create gradle configuration with detected credentials
          cat > android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.bundle.enableUncompressedNativeLibs=false
          android.enableR8.fullMode=true
          MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks
          MYAPP_UPLOAD_KEY_ALIAS=$KEYSTORE_ALIAS
          MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD
          MYAPP_UPLOAD_KEY_PASSWORD=$KEYSTORE_PASSWORD
          EOF
          
          # Create gradle wrapper
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.1.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Create build files
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'OptiBuy'
          include ':app'
          project(':app').projectDir = new File(rootProject.projectDir, 'app')
          EOF
          
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 35
                  targetSdkVersion = 35
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.4'
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF
          
          cat > android/app/build.gradle << 'EOF'
          apply plugin: 'com.android.application'
          
          android {
              namespace 'com.optibuy.collective'
              compileSdkVersion rootProject.ext.compileSdkVersion
              buildToolsVersion rootProject.ext.buildToolsVersion
              
              defaultConfig {
                  applicationId "com.optibuy.collective"
                  minSdkVersion rootProject.ext.minSdkVersion
                  targetSdkVersion rootProject.ext.targetSdkVersion
                  versionCode 2
                  versionName "1.2.0"
              }
              
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
                  release {
                      if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                          storeFile file(MYAPP_UPLOAD_STORE_FILE)
                          storePassword MYAPP_UPLOAD_STORE_PASSWORD
                          keyAlias MYAPP_UPLOAD_KEY_ALIAS
                          keyPassword MYAPP_UPLOAD_KEY_PASSWORD
                      }
                  }
              }
              
              buildTypes {
                  debug {
                      signingConfig signingConfigs.debug
                  }
                  release {
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.release
                  }
              }
              
              bundle {
                  language {
                      enableSplit = false
                  }
                  density {
                      enableSplit = true
                  }
                  abi {
                      enableSplit = true
                  }
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'com.google.android.material:material:1.9.0'
          }
          EOF
          
          # Create Android resources
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.INTERNET" />
              
              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">OptiBuy</string>
              <string name="welcome_title">OptiBuy</string>
              <string name="welcome_subtitle">Collective Purchasing Platform</string>
              <string name="welcome_description">Upload Key Detective - Keystore Analysis</string>
          </resources>
          EOF
          
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#4CAF50</item>
                  <item name="colorPrimaryDark">#388E3C</item>
                  <item name="colorAccent">#FF5722</item>
              </style>
          </resources>
          EOF
          
          cat > android/app/src/main/java/com/optibuy/collective/MainActivity.java << 'EOF'
          package com.optibuy.collective;
          
          import androidx.appcompat.app.AppCompatActivity;
          import android.os.Bundle;
          
          public class MainActivity extends AppCompatActivity {
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_main);
              }
          }
          EOF
          
          cat > android/app/src/main/res/layout/activity_main.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:app="http://schemas.android.com/apk/res-auto"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:background="#f8f9fa">
          
              <TextView
                  android:id="@+id/title"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/welcome_title"
                  android:textSize="32sp"
                  android:textStyle="bold"
                  android:textColor="#000000"
                  app:layout_constraintTop_toTopOf="parent"
                  app:layout_constraintBottom_toBottomOf="parent"
                  app:layout_constraintLeft_toLeftOf="parent"
                  app:layout_constraintRight_toRightOf="parent" />
          
          </androidx.constraintlayout.widget.ConstraintLayout>
          EOF
          
          # Create simple app icons
          echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==' | base64 -d > android/app/src/main/res/mipmap-hdpi/ic_launcher.png
          echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==' | base64 -d > android/app/src/main/res/mipmap-mdpi/ic_launcher.png
          echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==' | base64 -d > android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
          echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==' | base64 -d > android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==' | base64 -d > android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
          
          # Build AAB
          cd android
          echo "Building AAB with keystore analysis results..."
          gradle clean
          gradle bundleRelease
          
          # Verify and copy results
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
              cd ../..
              
              if [ "$KEYSTORE_FOUND" = "true" ]; then
                  cp OptiBuy/android/app/build/outputs/bundle/release/app-release.aab ./optibuy-perfect-match.aab
                  echo "=== PERFECT KEYSTORE MATCH AAB READY ===" > deployment_report.txt
                  echo "Status: Perfect keystore match found and used" >> deployment_report.txt
                  echo "Expected fingerprint: $EXPECTED_FINGERPRINT" >> deployment_report.txt
                  echo "READY FOR GOOGLE PLAY CONSOLE UPLOAD" >> deployment_report.txt
              else
                  cp OptiBuy/android/app/build/outputs/bundle/release/app-release.aab ./optibuy-support-request.aab
                  ACTUAL_FINGERPRINT=$(keytool -list -v -keystore working-keystore.jks -storepass optibuy_upload_2025 -alias upload | grep "SHA1:" | head -1 | awk '{print $2}')
                  echo "=== GOOGLE PLAY SUPPORT REQUEST NEEDED ===" > deployment_report.txt
                  echo "Status: No matching keystore found" >> deployment_report.txt
                  echo "Expected fingerprint: $EXPECTED_FINGERPRINT" >> deployment_report.txt
                  echo "New AAB fingerprint: $ACTUAL_FINGERPRINT" >> deployment_report.txt
                  echo "ACTION REQUIRED: Request second upload key reset" >> deployment_report.txt
                  echo "" >> deployment_report.txt
                  echo "Support message template:" >> deployment_report.txt
                  echo "Subject: Upload Key Reset Request - Second Reset Needed" >> deployment_report.txt
                  echo "App: OptiBuy (com.optibuy.collective)" >> deployment_report.txt
                  echo "I need a second upload key reset." >> deployment_report.txt
                  echo "Current Expected: $EXPECTED_FINGERPRINT" >> deployment_report.txt
                  echo "New Certificate: $ACTUAL_FINGERPRINT" >> deployment_report.txt
                  echo "Please update the upload key to match the new certificate." >> deployment_report.txt
              fi
              
              echo "AAB generation completed!"
              ls -la *.aab
              cat deployment_report.txt
          else
              echo "ERROR: AAB build failed"
              exit 1
          fi
          
    artifacts:
      - "*.aab"
      - "*.jks"
      - "deployment_report.txt"
      - "keystore_config.sh"
    publishing:
      email:
        recipients:
          - build@optibuy.com
        notify:
          success: true
          failure: true
