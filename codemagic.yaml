workflows:
  android-workflow:
    name: Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 18
    scripts:
      - name: Download and extract client archive
        script: |
          echo "=== Downloading client archive ==="
          curl -L -o client-clean.tar.gz "https://github.com/optibuy-collective/optibuy-repo/releases/download/v1.1/client-clean.tar.gz"
          ls -lh client-clean.tar.gz
          
          echo "=== Extracting client archive ==="
          tar -xzf client-clean.tar.gz
          ls -la
          
      - name: Initialize project structure
        script: |
          echo "=== Creating project structure ==="
          mkdir -p src/components src/pages src/lib src/hooks
          
          echo "=== Moving files to proper structure ==="
          find . -maxdepth 1 -name "*.tsx" -o -name "*.ts" -o -name "*.css" | while read file; do
            case "$file" in
              ./App.tsx|./main.tsx|./index.css) mv "$file" src/ ;;
              *) echo "Keeping $file in root" ;;
            esac
          done
          
          find . -maxdepth 1 -name "*-*.tsx" | while read file; do
            mv "$file" src/pages/
          done
          
          find . -maxdepth 1 -name "*.tsx" | grep -v App.tsx | grep -v main.tsx | while read file; do
            mv "$file" src/components/
          done
          
          echo "=== Creating required lib files ==="
          cat > src/lib/queryClient.ts << 'EOF'
          import { QueryClient } from '@tanstack/react-query'
          
          export const queryClient = new QueryClient({
            defaultOptions: {
              queries: {
                staleTime: 1000 * 60 * 5, // 5 minutes
                retry: 1,
              },
            },
          })
          
          export async function apiRequest(url: string, options: RequestInit = {}) {
            const response = await fetch(url, {
              headers: {
                'Content-Type': 'application/json',
                ...options.headers,
              },
              ...options,
            })
            
            if (!response.ok) {
              throw new Error(`API request failed: ${response.statusText}`)
            }
            
            return response.json()
          }
          EOF
          
          cat > src/lib/utils.ts << 'EOF'
          import { type ClassValue, clsx } from "clsx"
          import { twMerge } from "tailwind-merge"
          
          export function cn(...inputs: ClassValue[]) {
            return twMerge(clsx(inputs))
          }
          EOF
          
          echo "=== Creating basic index.html ==="
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <link rel="icon" type="image/svg+xml" href="/vite.svg" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy - Collective Purchase Platform</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
          echo "=== Creating UI components directory ==="
          mkdir -p src/components/ui src/hooks
          
          echo "=== Creating missing UI components ==="
          cat > src/components/ui/tooltip.tsx << 'EOF'
          import * as React from "react"
          export const Tooltip = ({ children }: { children: React.ReactNode }) => <>{children}</>
          export const TooltipTrigger = ({ children }: { children: React.ReactNode }) => <>{children}</>
          export const TooltipContent = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const TooltipProvider = ({ children }: { children: React.ReactNode }) => <>{children}</>
          EOF
          
          cat > src/components/ui/toaster.tsx << 'EOF'
          import * as React from "react"
          export const Toaster = () => <div id="toaster" />
          EOF
          
          cat > src/components/ui/button.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          export const Button = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement>>(
            ({ className, ...props }, ref) => (
              <button ref={ref} className={cn("px-4 py-2 rounded", className)} {...props} />
            )
          )
          Button.displayName = "Button"
          EOF
          
          cat > src/components/ui/input.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          export const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
            ({ className, ...props }, ref) => (
              <input ref={ref} className={cn("border rounded px-3 py-2", className)} {...props} />
            )
          )
          Input.displayName = "Input"
          EOF
          
          cat > src/hooks/use-toast.ts << 'EOF'
          export const useToast = () => ({
            toast: (props: any) => console.log('Toast:', props)
          })
          EOF
          
          echo "=== Creating theme provider ==="
          cat > src/components/theme-provider.tsx << 'EOF'
          import * as React from "react"
          
          type Theme = "dark" | "light" | "system"
          
          type ThemeProviderProps = {
            children: React.ReactNode
            defaultTheme?: Theme
            storageKey?: string
          }
          
          type ThemeProviderState = {
            theme: Theme
            setTheme: (theme: Theme) => void
          }
          
          const initialState: ThemeProviderState = {
            theme: "system",
            setTheme: () => null,
          }
          
          const ThemeProviderContext = React.createContext<ThemeProviderState>(initialState)
          
          export function ThemeProvider({
            children,
            defaultTheme = "system",
            storageKey = "vite-ui-theme",
            ...props
          }: ThemeProviderProps) {
            const [theme, setTheme] = React.useState<Theme>(defaultTheme)
          
            React.useEffect(() => {
              const root = window.document.documentElement
              root.classList.remove("light", "dark")
              if (theme === "system") {
                const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
                root.classList.add(systemTheme)
                return
              }
              root.classList.add(theme)
            }, [theme])
          
            const value = {
              theme,
              setTheme: (theme: Theme) => {
                localStorage.setItem(storageKey, theme)
                setTheme(theme)
              },
            }
          
            return (
              <ThemeProviderContext.Provider {...props} value={value}>
                {children}
              </ThemeProviderContext.Provider>
            )
          }
          
          export const useTheme = () => {
            const context = React.useContext(ThemeProviderContext)
            if (context === undefined)
              throw new Error("useTheme must be used within a ThemeProvider")
            return context
          }
          EOF
          
          echo "=== Creating proper CSS with variables ==="
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          
          @layer base {
            :root {
              --background: 0 0% 100%;
              --foreground: 222.2 84% 4.9%;
              --card: 0 0% 100%;
              --card-foreground: 222.2 84% 4.9%;
              --popover: 0 0% 100%;
              --popover-foreground: 222.2 84% 4.9%;
              --primary: 222.2 47.4% 11.2%;
              --primary-foreground: 210 40% 98%;
              --secondary: 210 40% 96%;
              --secondary-foreground: 222.2 84% 4.9%;
              --muted: 210 40% 96%;
              --muted-foreground: 215.4 16.3% 46.9%;
              --accent: 210 40% 96%;
              --accent-foreground: 222.2 84% 4.9%;
              --destructive: 0 84.2% 60.2%;
              --destructive-foreground: 210 40% 98%;
              --border: 214.3 31.8% 91.4%;
              --input: 214.3 31.8% 91.4%;
              --ring: 222.2 84% 4.9%;
              --radius: 0.5rem;
            }
          
            .dark {
              --background: 222.2 84% 4.9%;
              --foreground: 210 40% 98%;
              --card: 222.2 84% 4.9%;
              --card-foreground: 210 40% 98%;
              --popover: 222.2 84% 4.9%;
              --popover-foreground: 210 40% 98%;
              --primary: 210 40% 98%;
              --primary-foreground: 222.2 47.4% 11.2%;
              --secondary: 217.2 32.6% 17.5%;
              --secondary-foreground: 210 40% 98%;
              --muted: 217.2 32.6% 17.5%;
              --muted-foreground: 215 20.2% 65.1%;
              --accent: 217.2 32.6% 17.5%;
              --accent-foreground: 210 40% 98%;
              --destructive: 0 62.8% 30.6%;
              --destructive-foreground: 210 40% 98%;
              --border: 217.2 32.6% 17.5%;
              --input: 217.2 32.6% 17.5%;
              --ring: 212.7 26.8% 83.9%;
            }
          }
          
          @layer base {
            * {
              @apply border-border;
            }
            body {
              @apply bg-background text-foreground;
            }
          }
          EOF
          
          echo "=== Creating missing components ==="
          cat > src/components/legal-disclaimer-banner.tsx << 'EOF'
          import * as React from "react"
          export const LegalDisclaimerBanner = () => (
            <div className="bg-muted p-4 text-sm text-muted-foreground">
              <p>Legal disclaimer banner component</p>
            </div>
          )
          EOF
          
          echo "=== Creating missing pages ==="
          cat > src/pages/onboarding.tsx << 'EOF'
          import * as React from "react"
          export default function OnboardingPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Welcome to OptiBuy</h1>
                <p>Get started with collective purchasing</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/not-found.tsx << 'EOF'
          import * as React from "react"
          export default function NotFoundPage() {
            return (
              <div className="container mx-auto p-6 text-center">
                <h1 className="text-4xl font-bold mb-4">404</h1>
                <p>Page not found</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating all missing pages ==="
          cat > src/pages/achievements.tsx << 'EOF'
          import * as React from "react"
          export default function AchievementsPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Achievements</h1>
                <p>Your collective purchasing achievements</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/business-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function BusinessDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Business Dashboard</h1>
                <p>B2B collective purchasing dashboard</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/consumer-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function ConsumerDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Consumer Dashboard</h1>
                <p>Your personal purchasing dashboard</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/profile.tsx << 'EOF'
          import * as React from "react"
          export default function ProfilePage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Profile</h1>
                <p>Manage your account settings</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/categories.tsx << 'EOF'
          import * as React from "react"
          export default function CategoriesPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Categories</h1>
                <p>Browse product categories</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/my-plans.tsx << 'EOF'
          import * as React from "react"
          export default function MyPlansPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">My Plans</h1>
                <p>Your purchase plans and intentions</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating additional UI components ==="
          cat > src/components/ui/card.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
            )
          )
          Card.displayName = "Card"
          
          export const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
            )
          )
          CardHeader.displayName = "CardHeader"
          
          export const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
            ({ className, ...props }, ref) => (
              <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
            )
          )
          CardTitle.displayName = "CardTitle"
          
          export const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
            )
          )
          CardContent.displayName = "CardContent"
          EOF
          
          cat > src/components/ui/form.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Form = ({ children }: { children: React.ReactNode }) => <form>{children}</form>
          export const FormField = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const FormItem = ({ children }: { children: React.ReactNode }) => <div className="space-y-2">{children}</div>
          export const FormLabel = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
            ({ className, ...props }, ref) => (
              <label ref={ref} className={cn("text-sm font-medium leading-none", className)} {...props} />
            )
          )
          FormLabel.displayName = "FormLabel"
          export const FormControl = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const FormMessage = ({ children }: { children: React.ReactNode }) => <p className="text-sm text-destructive">{children}</p>
          EOF
          
          echo "=== Creating minimal CSS without problematic classes ==="
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          
          @layer base {
            :root {
              --background: 0 0% 100%;
              --foreground: 222.2 84% 4.9%;
              --card: 0 0% 100%;
              --card-foreground: 222.2 84% 4.9%;
              --popover: 0 0% 100%;
              --popover-foreground: 222.2 84% 4.9%;
              --primary: 222.2 47.4% 11.2%;
              --primary-foreground: 210 40% 98%;
              --secondary: 210 40% 96%;
              --secondary-foreground: 222.2 84% 4.9%;
              --muted: 210 40% 96%;
              --muted-foreground: 215.4 16.3% 46.9%;
              --accent: 210 40% 96%;
              --accent-foreground: 222.2 84% 4.9%;
              --destructive: 0 84.2% 60.2%;
              --destructive-foreground: 210 40% 98%;
              --border: 214.3 31.8% 91.4%;
              --input: 214.3 31.8% 91.4%;
              --ring: 222.2 84% 4.9%;
              --radius: 0.5rem;
            }
          
            .dark {
              --background: 222.2 84% 4.9%;
              --foreground: 210 40% 98%;
              --card: 222.2 84% 4.9%;
              --card-foreground: 210 40% 98%;
              --popover: 222.2 84% 4.9%;
              --popover-foreground: 210 40% 98%;
              --primary: 210 40% 98%;
              --primary-foreground: 222.2 47.4% 11.2%;
              --secondary: 217.2 32.6% 17.5%;
              --secondary-foreground: 210 40% 98%;
              --muted: 217.2 32.6% 17.5%;
              --muted-foreground: 215 20.2% 65.1%;
              --accent: 217.2 32.6% 17.5%;
              --accent-foreground: 210 40% 98%;
              --destructive: 0 62.8% 30.6%;
              --destructive-foreground: 210 40% 98%;
              --border: 217.2 32.6% 17.5%;
              --input: 217.2 32.6% 17.5%;
              --ring: 212.7 26.8% 83.9%;
            }
          }
          
          body {
            background-color: white;
            color: rgb(9 9 11);
          }
          EOF
          
          echo "=== Creating remaining missing components ==="
          cat > src/components/mobile-container.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../lib/utils"
          
          interface MobileContainerProps {
            children: React.ReactNode
            className?: string
          }
          
          export const MobileContainer = ({ children, className }: MobileContainerProps) => (
            <div className={cn("max-w-md mx-auto min-h-screen bg-white", className)}>
              {children}
            </div>
          )
          EOF
          
          cat > src/components/ui/badge.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Badge = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div
                ref={ref}
                className={cn(
                  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
                  className
                )}
                {...props}
              />
            )
          )
          Badge.displayName = "Badge"
          EOF
          
          echo "=== Creating additional missing pages ==="
          cat > src/pages/user-type-selection.tsx << 'EOF'
          import * as React from "react"
          export default function UserTypeSelectionPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Select User Type</h1>
                <p>Choose between consumer and business account</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/seller-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function SellerDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Seller Dashboard</h1>
                <p>Manage your offers and analytics</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating more UI components ==="
          cat > src/components/ui/select.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Select = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const SelectContent = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const SelectItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & { value: string }>(
            ({ className, value, ...props }, ref) => (
              <div ref={ref} className={cn("cursor-pointer px-2 py-1", className)} data-value={value} {...props} />
            )
          )
          SelectItem.displayName = "SelectItem"
          export const SelectTrigger = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement>>(
            ({ className, ...props }, ref) => (
              <button ref={ref} className={cn("border rounded px-3 py-2 w-full text-left", className)} {...props} />
            )
          )
          SelectTrigger.displayName = "SelectTrigger"
          export const SelectValue = ({ placeholder }: { placeholder?: string }) => <span>{placeholder}</span>
          EOF
          
          cat > src/components/ui/label.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
            ({ className, ...props }, ref) => (
              <label ref={ref} className={cn("text-sm font-medium leading-none", className)} {...props} />
            )
          )
          Label.displayName = "Label"
          EOF
          
          cat > src/components/ui/textarea.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(
            ({ className, ...props }, ref) => (
              <textarea ref={ref} className={cn("border rounded px-3 py-2 min-h-[80px] w-full", className)} {...props} />
            )
          )
          Textarea.displayName = "Textarea"
          EOF
          
          echo "=== Final project structure ==="
          find src -type f | head -40
          ls -la index.html

      - name: Install dependencies and build web assets
        script: |
          echo "=== Current package.json ==="
          cat package.json
          
          echo "=== Installing complete dependencies ==="
          npm install vite @vitejs/plugin-react typescript react react-dom
          npm install @types/react @types/react-dom
          npm install @tailwindcss/postcss postcss autoprefixer
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          echo "=== Installing React app dependencies ==="
          npm install wouter @tanstack/react-query
          npm install @radix-ui/react-slot @radix-ui/react-toast @radix-ui/react-dialog
          npm install @radix-ui/react-select @radix-ui/react-label @radix-ui/react-button
          npm install @radix-ui/react-accordion @radix-ui/react-tabs
          npm install @radix-ui/react-dropdown-menu @radix-ui/react-navigation-menu
          npm install lucide-react react-hook-form @hookform/resolvers
          npm install zod tailwind-merge class-variance-authority clsx
          npm install date-fns react-day-picker
          
          echo "=== Removing old tailwindcss if present ==="
          npm uninstall tailwindcss || echo "tailwindcss not installed"
          
          echo "=== Installing missing Replit plugins as stubs ==="
          npm install --save-dev @replit/vite-plugin-runtime-error-modal @replit/vite-plugin-cartographer || echo "Replit plugins not available, will use clean vite config"
          
          echo "=== Verifying Vite installation ==="
          npx vite --version
          
          echo "=== Replacing Replit-specific vite.config.ts ==="
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              emptyOutDir: true
            },
            resolve: {
              alias: {
                '@': '/src'
              }
            }
          })
          EOF
          
          echo "=== New vite.config.ts content ==="
          cat vite.config.ts
          
          echo "=== Removing conflicting PostCSS configs ==="
          rm -f postcss.config.js postcss.config.ts tailwind.config.js tailwind.config.ts
          
          echo "=== Creating clean PostCSS configuration ==="
          cat > postcss.config.mjs << 'EOF'
          export default {
            plugins: {
              '@tailwindcss/postcss': {},
              autoprefixer: {},
            },
          }
          EOF
          
          echo "=== Creating clean Tailwind config ==="
          cat > tailwind.config.mjs << 'EOF'
          export default {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {
                colors: {
                  border: "hsl(var(--border))",
                  input: "hsl(var(--input))",
                  ring: "hsl(var(--ring))",
                  background: "hsl(var(--background))",
                  foreground: "hsl(var(--foreground))",
                  primary: {
                    DEFAULT: "hsl(var(--primary))",
                    foreground: "hsl(var(--primary-foreground))",
                  },
                  secondary: {
                    DEFAULT: "hsl(var(--secondary))",
                    foreground: "hsl(var(--secondary-foreground))",
                  },
                  destructive: {
                    DEFAULT: "hsl(var(--destructive))",
                    foreground: "hsl(var(--destructive-foreground))",
                  },
                  muted: {
                    DEFAULT: "hsl(var(--muted))",
                    foreground: "hsl(var(--muted-foreground))",
                  },
                  accent: {
                    DEFAULT: "hsl(var(--accent))",
                    foreground: "hsl(var(--accent-foreground))",
                  },
                  popover: {
                    DEFAULT: "hsl(var(--popover))",
                    foreground: "hsl(var(--popover-foreground))",
                  },
                  card: {
                    DEFAULT: "hsl(var(--card))",
                    foreground: "hsl(var(--card-foreground))",
                  },
                },
                borderRadius: {
                  lg: "0.5rem",
                  md: "0.375rem",
                  sm: "0.25rem",
                },
              },
            },
            plugins: [],
          }
          EOF
          
          echo "=== Verifying clean configuration ==="
          ls -la *.config.* *.mjs
          echo "=== PostCSS config content ==="
          cat postcss.config.mjs
          echo "=== Tailwind config content ==="
          cat tailwind.config.mjs
          
          echo "=== Building web assets ==="
          npm run build || npx vite build
          ls -la dist/

      - name: Create debug keystore
        script: |
          echo "=== Creating debug keystore ==="
          keytool -genkey -v -keystore debug.keystore -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=OptiBuy Debug, O=OptiBuy, C=TR"
          ls -la debug.keystore

      - name: Install Capacitor and add Android platform
        script: |
          echo "=== Capacitor already installed in previous step ==="
          
          echo "=== Initializing Capacitor ==="
          npx cap init "OptiBuy" "com.optibuy.collective" --web-dir=dist
          
          echo "=== Adding Android platform ==="
          npx cap add android
          
          echo "=== Syncing Capacitor ==="
          npx cap sync android

      - name: Configure Android signing
        script: |
          echo "=== Copying keystore to Android project ==="
          cp debug.keystore android/
          
          echo "=== Creating key.properties ==="
          cat > android/key.properties << 'EOF'
          storePassword=android
          keyPassword=android
          keyAlias=optibuy
          storeFile=debug.keystore
          EOF
          
          echo "=== Verifying files ==="
          ls -la android/debug.keystore android/key.properties

      - name: Build Android AAB
        script: |
          cd android
          echo "=== Setting Gradle permissions ==="
          chmod +x gradlew
          
          echo "=== Checking current build.gradle ==="
          cat app/build.gradle
          
          echo "=== Clean build ==="
          ./gradlew clean
          
          echo "=== Building AAB ==="
          ./gradlew bundleRelease --stacktrace --info
          
          echo "=== Alternative: Building APK ==="
          ./gradlew assembleRelease --stacktrace --info
          
          echo "=== Checking build outputs ==="
          find app/build -name "*.aab" -o -name "*.apk" -exec ls -lh {} \;
          
          echo "=== Build directory structure ==="
          ls -la app/build/outputs/

    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      - debug.keystore
