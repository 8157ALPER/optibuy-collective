workflows:
  android-workflow:
    name: Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 18
    scripts:
      - name: Download and extract client archive
        script: |
          echo "=== Downloading client archive ==="
          curl -L -o client-clean.tar.gz "https://github.com/optibuy-collective/optibuy-repo/releases/download/v1.1/client-clean.tar.gz"
          ls -lh client-clean.tar.gz
          
          echo "=== Extracting client archive ==="
          tar -xzf client-clean.tar.gz
          ls -la
          
      - name: Initialize project structure
        script: |
          echo "=== Creating project structure ==="
          mkdir -p src/components src/pages src/lib src/hooks
          
          echo "=== Moving files to proper structure ==="
          find . -maxdepth 1 -name "*.tsx" -o -name "*.ts" -o -name "*.css" | while read file; do
            case "$file" in
              ./App.tsx|./main.tsx|./index.css) mv "$file" src/ ;;
              *) echo "Keeping $file in root" ;;
            esac
          done
          
          find . -maxdepth 1 -name "*-*.tsx" | while read file; do
            mv "$file" src/pages/
          done
          
          find . -maxdepth 1 -name "*.tsx" | grep -v App.tsx | grep -v main.tsx | while read file; do
            mv "$file" src/components/
          done
          
          echo "=== Creating required lib files ==="
          cat > src/lib/queryClient.ts << 'EOF'
          import { QueryClient } from '@tanstack/react-query'
          
          export const queryClient = new QueryClient({
            defaultOptions: {
              queries: {
                staleTime: 1000 * 60 * 5, // 5 minutes
                retry: 1,
              },
            },
          })
          
          export async function apiRequest(url: string, options: RequestInit = {}) {
            const response = await fetch(url, {
              headers: {
                'Content-Type': 'application/json',
                ...options.headers,
              },
              ...options,
            })
            
            if (!response.ok) {
              throw new Error(`API request failed: ${response.statusText}`)
            }
            
            return response.json()
          }
          EOF
          
          cat > src/lib/utils.ts << 'EOF'
          import { type ClassValue, clsx } from "clsx"
          import { twMerge } from "tailwind-merge"
          
          export function cn(...inputs: ClassValue[]) {
            return twMerge(clsx(inputs))
          }
          EOF
          
          echo "=== Creating basic index.html ==="
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <link rel="icon" type="image/svg+xml" href="/vite.svg" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy - Collective Purchase Platform</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
          echo "=== Creating UI components directory ==="
          mkdir -p src/components/ui src/hooks
          
          echo "=== Creating missing UI components ==="
          cat > src/components/ui/tooltip.tsx << 'EOF'
          import * as React from "react"
          export const Tooltip = ({ children }: { children: React.ReactNode }) => <>{children}</>
          export const TooltipTrigger = ({ children }: { children: React.ReactNode }) => <>{children}</>
          export const TooltipContent = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const TooltipProvider = ({ children }: { children: React.ReactNode }) => <>{children}</>
          EOF
          
          cat > src/components/ui/toaster.tsx << 'EOF'
          import * as React from "react"
          export const Toaster = () => <div id="toaster" />
          EOF
          
          cat > src/components/ui/button.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          export const Button = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement>>(
            ({ className, ...props }, ref) => (
              <button ref={ref} className={cn("px-4 py-2 rounded", className)} {...props} />
            )
          )
          Button.displayName = "Button"
          EOF
          
          cat > src/components/ui/input.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          export const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
            ({ className, ...props }, ref) => (
              <input ref={ref} className={cn("border rounded px-3 py-2", className)} {...props} />
            )
          )
          Input.displayName = "Input"
          EOF
          
          cat > src/hooks/use-toast.ts << 'EOF'
          export const useToast = () => ({
            toast: (props: any) => console.log('Toast:', props)
          })
          EOF
          
          echo "=== Creating theme provider ==="
          cat > src/components/theme-provider.tsx << 'EOF'
          import * as React from "react"
          
          type Theme = "dark" | "light" | "system"
          
          type ThemeProviderProps = {
            children: React.ReactNode
            defaultTheme?: Theme
            storageKey?: string
          }
          
          type ThemeProviderState = {
            theme: Theme
            setTheme: (theme: Theme) => void
          }
          
          const initialState: ThemeProviderState = {
            theme: "system",
            setTheme: () => null,
          }
          
          const ThemeProviderContext = React.createContext<ThemeProviderState>(initialState)
          
          export function ThemeProvider({
            children,
            defaultTheme = "system",
            storageKey = "vite-ui-theme",
            ...props
          }: ThemeProviderProps) {
            const [theme, setTheme] = React.useState<Theme>(defaultTheme)
          
            React.useEffect(() => {
              const root = window.document.documentElement
              root.classList.remove("light", "dark")
              if (theme === "system") {
                const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
                root.classList.add(systemTheme)
                return
              }
              root.classList.add(theme)
            }, [theme])
          
            const value = {
              theme,
              setTheme: (theme: Theme) => {
                localStorage.setItem(storageKey, theme)
                setTheme(theme)
              },
            }
          
            return (
              <ThemeProviderContext.Provider {...props} value={value}>
                {children}
              </ThemeProviderContext.Provider>
            )
          }
          
          export const useTheme = () => {
            const context = React.useContext(ThemeProviderContext)
            if (context === undefined)
              throw new Error("useTheme must be used within a ThemeProvider")
            return context
          }
          EOF
          
          echo "=== Creating proper CSS with variables ==="
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          
          @layer base {
            :root {
              --background: 0 0% 100%;
              --foreground: 222.2 84% 4.9%;
              --card: 0 0% 100%;
              --card-foreground: 222.2 84% 4.9%;
              --popover: 0 0% 100%;
              --popover-foreground: 222.2 84% 4.9%;
              --primary: 222.2 47.4% 11.2%;
              --primary-foreground: 210 40% 98%;
              --secondary: 210 40% 96%;
              --secondary-foreground: 222.2 84% 4.9%;
              --muted: 210 40% 96%;
              --muted-foreground: 215.4 16.3% 46.9%;
              --accent: 210 40% 96%;
              --accent-foreground: 222.2 84% 4.9%;
              --destructive: 0 84.2% 60.2%;
              --destructive-foreground: 210 40% 98%;
              --border: 214.3 31.8% 91.4%;
              --input: 214.3 31.8% 91.4%;
              --ring: 222.2 84% 4.9%;
              --radius: 0.5rem;
            }
          
            .dark {
              --background: 222.2 84% 4.9%;
              --foreground: 210 40% 98%;
              --card: 222.2 84% 4.9%;
              --card-foreground: 210 40% 98%;
              --popover: 222.2 84% 4.9%;
              --popover-foreground: 210 40% 98%;
              --primary: 210 40% 98%;
              --primary-foreground: 222.2 47.4% 11.2%;
              --secondary: 217.2 32.6% 17.5%;
              --secondary-foreground: 210 40% 98%;
              --muted: 217.2 32.6% 17.5%;
              --muted-foreground: 215 20.2% 65.1%;
              --accent: 217.2 32.6% 17.5%;
              --accent-foreground: 210 40% 98%;
              --destructive: 0 62.8% 30.6%;
              --destructive-foreground: 210 40% 98%;
              --border: 217.2 32.6% 17.5%;
              --input: 217.2 32.6% 17.5%;
              --ring: 212.7 26.8% 83.9%;
            }
          }
          
          @layer base {
            * {
              @apply border-border;
            }
            body {
              @apply bg-background text-foreground;
            }
          }
          EOF
          
          echo "=== Creating missing components ==="
          cat > src/components/legal-disclaimer-banner.tsx << 'EOF'
          import * as React from "react"
          export const LegalDisclaimerBanner = () => (
            <div className="bg-muted p-4 text-sm text-muted-foreground">
              <p>Legal disclaimer banner component</p>
            </div>
          )
          EOF
          
          echo "=== Creating missing pages ==="
          cat > src/pages/onboarding.tsx << 'EOF'
          import * as React from "react"
          export default function OnboardingPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Welcome to OptiBuy</h1>
                <p>Get started with collective purchasing</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/not-found.tsx << 'EOF'
          import * as React from "react"
          export default function NotFoundPage() {
            return (
              <div className="container mx-auto p-6 text-center">
                <h1 className="text-4xl font-bold mb-4">404</h1>
                <p>Page not found</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating all missing pages ==="
          cat > src/pages/achievements.tsx << 'EOF'
          import * as React from "react"
          export default function AchievementsPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Achievements</h1>
                <p>Your collective purchasing achievements</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/business-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function BusinessDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Business Dashboard</h1>
                <p>B2B collective purchasing dashboard</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/consumer-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function ConsumerDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Consumer Dashboard</h1>
                <p>Your personal purchasing dashboard</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/profile.tsx << 'EOF'
          import * as React from "react"
          export default function ProfilePage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Profile</h1>
                <p>Manage your account settings</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/categories.tsx << 'EOF'
          import * as React from "react"
          export default function CategoriesPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Categories</h1>
                <p>Browse product categories</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/my-plans.tsx << 'EOF'
          import * as React from "react"
          export default function MyPlansPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">My Plans</h1>
                <p>Your purchase plans and intentions</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating additional UI components ==="
          cat > src/components/ui/card.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
            )
          )
          Card.displayName = "Card"
          
          export const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
            )
          )
          CardHeader.displayName = "CardHeader"
          
          export const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
            ({ className, ...props }, ref) => (
              <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
            )
          )
          CardTitle.displayName = "CardTitle"
          
          export const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
            )
          )
          CardContent.displayName = "CardContent"
          EOF
          
          cat > src/components/ui/form.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Form = ({ children }: { children: React.ReactNode }) => <form>{children}</form>
          export const FormField = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const FormItem = ({ children }: { children: React.ReactNode }) => <div className="space-y-2">{children}</div>
          export const FormLabel = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
            ({ className, ...props }, ref) => (
              <label ref={ref} className={cn("text-sm font-medium leading-none", className)} {...props} />
            )
          )
          FormLabel.displayName = "FormLabel"
          export const FormControl = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const FormMessage = ({ children }: { children: React.ReactNode }) => <p className="text-sm text-destructive">{children}</p>
          EOF
          
          echo "=== Creating minimal CSS without problematic classes ==="
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          
          @layer base {
            :root {
              --background: 0 0% 100%;
              --foreground: 222.2 84% 4.9%;
              --card: 0 0% 100%;
              --card-foreground: 222.2 84% 4.9%;
              --popover: 0 0% 100%;
              --popover-foreground: 222.2 84% 4.9%;
              --primary: 222.2 47.4% 11.2%;
              --primary-foreground: 210 40% 98%;
              --secondary: 210 40% 96%;
              --secondary-foreground: 222.2 84% 4.9%;
              --muted: 210 40% 96%;
              --muted-foreground: 215.4 16.3% 46.9%;
              --accent: 210 40% 96%;
              --accent-foreground: 222.2 84% 4.9%;
              --destructive: 0 84.2% 60.2%;
              --destructive-foreground: 210 40% 98%;
              --border: 214.3 31.8% 91.4%;
              --input: 214.3 31.8% 91.4%;
              --ring: 222.2 84% 4.9%;
              --radius: 0.5rem;
            }
          
            .dark {
              --background: 222.2 84% 4.9%;
              --foreground: 210 40% 98%;
              --card: 222.2 84% 4.9%;
              --card-foreground: 210 40% 98%;
              --popover: 222.2 84% 4.9%;
              --popover-foreground: 210 40% 98%;
              --primary: 210 40% 98%;
              --primary-foreground: 222.2 47.4% 11.2%;
              --secondary: 217.2 32.6% 17.5%;
              --secondary-foreground: 210 40% 98%;
              --muted: 217.2 32.6% 17.5%;
              --muted-foreground: 215 20.2% 65.1%;
              --accent: 217.2 32.6% 17.5%;
              --accent-foreground: 210 40% 98%;
              --destructive: 0 62.8% 30.6%;
              --destructive-foreground: 210 40% 98%;
              --border: 217.2 32.6% 17.5%;
              --input: 217.2 32.6% 17.5%;
              --ring: 212.7 26.8% 83.9%;
            }
          }
          
          body {
            background-color: white;
            color: rgb(9 9 11);
          }
          EOF
          
          echo "=== Creating remaining missing components ==="
          cat > src/components/mobile-container.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../lib/utils"
          
          interface MobileContainerProps {
            children: React.ReactNode
            className?: string
          }
          
          export const MobileContainer = ({ children, className }: MobileContainerProps) => (
            <div className={cn("max-w-md mx-auto min-h-screen bg-white", className)}>
              {children}
            </div>
          )
          EOF
          
          cat > src/components/ui/badge.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Badge = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div
                ref={ref}
                className={cn(
                  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
                  className
                )}
                {...props}
              />
            )
          )
          Badge.displayName = "Badge"
          EOF
          
          echo "=== Creating additional missing pages ==="
          cat > src/pages/user-type-selection.tsx << 'EOF'
          import * as React from "react"
          export default function UserTypeSelectionPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Select User Type</h1>
                <p>Choose between consumer and business account</p>
              </div>
            )
          }
          EOF
          
          cat > src/pages/seller-dashboard.tsx << 'EOF'
          import * as React from "react"
          export default function SellerDashboardPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Seller Dashboard</h1>
                <p>Manage your offers and analytics</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating more UI components ==="
          cat > src/components/ui/select.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Select = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const SelectContent = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const SelectItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & { value: string }>(
            ({ className, value, ...props }, ref) => (
              <div ref={ref} className={cn("cursor-pointer px-2 py-1", className)} data-value={value} {...props} />
            )
          )
          SelectItem.displayName = "SelectItem"
          export const SelectTrigger = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement>>(
            ({ className, ...props }, ref) => (
              <button ref={ref} className={cn("border rounded px-3 py-2 w-full text-left", className)} {...props} />
            )
          )
          SelectTrigger.displayName = "SelectTrigger"
          export const SelectValue = ({ placeholder }: { placeholder?: string }) => <span>{placeholder}</span>
          EOF
          
          cat > src/components/ui/label.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(
            ({ className, ...props }, ref) => (
              <label ref={ref} className={cn("text-sm font-medium leading-none", className)} {...props} />
            )
          )
          Label.displayName = "Label"
          EOF
          
          cat > src/components/ui/textarea.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(
            ({ className, ...props }, ref) => (
              <textarea ref={ref} className={cn("border rounded px-3 py-2 min-h-[80px] w-full", className)} {...props} />
            )
          )
          Textarea.displayName = "Textarea"
          EOF
          
          echo "=== Creating final missing components ==="
          cat > src/components/ui/checkbox.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Checkbox = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
            ({ className, ...props }, ref) => (
              <input
                type="checkbox"
                ref={ref}
                className={cn(
                  "h-4 w-4 rounded border border-primary text-primary focus:ring-2 focus:ring-primary focus:ring-offset-2",
                  className
                )}
                {...props}
              />
            )
          )
          Checkbox.displayName = "Checkbox"
          EOF
          
          cat > src/pages/create-purchase-intention.tsx << 'EOF'
          import * as React from "react"
          export default function CreatePurchaseIntentionPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Create Purchase Intention</h1>
                <p>Express your future buying needs</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating additional missing UI components ==="
          cat > src/components/ui/dialog.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Dialog = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const DialogContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("fixed inset-0 z-50 bg-white p-6 shadow-lg", className)} {...props} />
            )
          )
          DialogContent.displayName = "DialogContent"
          export const DialogHeader = ({ children }: { children: React.ReactNode }) => <div className="mb-4">{children}</div>
          export const DialogTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(
            ({ className, ...props }, ref) => (
              <h2 ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
            )
          )
          DialogTitle.displayName = "DialogTitle"
          export const DialogTrigger = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          EOF
          
          cat > src/components/ui/avatar.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Avatar = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)} {...props} />
            )
          )
          Avatar.displayName = "Avatar"
          
          export const AvatarImage = React.forwardRef<HTMLImageElement, React.ImgHTMLAttributes<HTMLImageElement>>(
            ({ className, ...props }, ref) => (
              <img ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
            )
          )
          AvatarImage.displayName = "AvatarImage"
          
          export const AvatarFallback = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)} {...props} />
            )
          )
          AvatarFallback.displayName = "AvatarFallback"
          EOF
          
          echo "=== Creating final missing UI components ==="
          cat > src/components/ui/tabs.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Tabs = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("w-full", className)} {...props} />
            )
          )
          Tabs.displayName = "Tabs"
          
          export const TabsList = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground", className)} {...props} />
            )
          )
          TabsList.displayName = "TabsList"
          
          export const TabsTrigger = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement> & { value: string }>(
            ({ className, value, ...props }, ref) => (
              <button ref={ref} className={cn("inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm", className)} data-value={value} {...props} />
            )
          )
          TabsTrigger.displayName = "TabsTrigger"
          
          export const TabsContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & { value: string }>(
            ({ className, value, ...props }, ref) => (
              <div ref={ref} className={cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", className)} data-value={value} {...props} />
            )
          )
          TabsContent.displayName = "TabsContent"
          EOF
          
          cat > src/pages/rfq-list.tsx << 'EOF'
          import * as React from "react"
          export default function RfqListPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">RFQ List</h1>
                <p>Request for Quote listings</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating additional missing components ==="
          cat > src/components/ui/switch.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Switch = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
            ({ className, ...props }, ref) => (
              <input
                type="checkbox"
                role="switch"
                ref={ref}
                className={cn(
                  "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
                  className
                )}
                {...props}
              />
            )
          )
          Switch.displayName = "Switch"
          EOF
          
          cat > src/components/ui/progress.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Progress = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & { value?: number; max?: number }>(
            ({ className, value = 0, max = 100, ...props }, ref) => (
              <div ref={ref} className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)} {...props}>
                <div
                  className="h-full w-full flex-1 bg-primary transition-all"
                  style={{ transform: `translateX(-${100 - (value / max) * 100}%)` }}
                />
              </div>
            )
          )
          Progress.displayName = "Progress"
          EOF
          
          echo "=== Creating remaining missing components ==="
          cat > src/components/ui/separator.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Separator = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & { orientation?: "horizontal" | "vertical" }>(
            ({ className, orientation = "horizontal", ...props }, ref) => (
              <div
                ref={ref}
                className={cn(
                  "shrink-0 bg-border",
                  orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
                  className
                )}
                {...props}
              />
            )
          )
          Separator.displayName = "Separator"
          EOF
          
          cat > src/pages/legal-disclaimer.tsx << 'EOF'
          import * as React from "react"
          export default function LegalDisclaimerPage() {
            return (
              <div className="container mx-auto p-6">
                <h1 className="text-2xl font-bold mb-4">Legal Disclaimer</h1>
                <p>Legal terms and conditions for OptiBuy platform</p>
              </div>
            )
          }
          EOF
          
          echo "=== Creating additional missing components ==="
          cat > src/components/ui/sheet.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Sheet = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const SheetContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("fixed inset-y-0 right-0 z-50 h-full w-3/4 border-l bg-background p-6 shadow-lg transition ease-in-out", className)} {...props} />
            )
          )
          SheetContent.displayName = "SheetContent"
          export const SheetHeader = ({ children }: { children: React.ReactNode }) => <div className="flex flex-col space-y-2 text-center sm:text-left">{children}</div>
          export const SheetTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(
            ({ className, ...props }, ref) => (
              <h2 ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />
            )
          )
          SheetTitle.displayName = "SheetTitle"
          export const SheetTrigger = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          EOF
          
          cat > src/components/ui/popover.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const Popover = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const PopoverContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none", className)} {...props} />
            )
          )
          PopoverContent.displayName = "PopoverContent"
          export const PopoverTrigger = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          EOF
          
          cat > src/components/ui/dropdown-menu.tsx << 'EOF'
          import * as React from "react"
          import { cn } from "../../lib/utils"
          
          export const DropdownMenu = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const DropdownMenuContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md", className)} {...props} />
            )
          )
          DropdownMenuContent.displayName = "DropdownMenuContent"
          export const DropdownMenuItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground", className)} {...props} />
            )
          )
          DropdownMenuItem.displayName = "DropdownMenuItem"
          export const DropdownMenuTrigger = ({ children }: { children: React.ReactNode }) => <div>{children}</div>
          export const DropdownMenuSeparator = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
            ({ className, ...props }, ref) => (
              <div ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
            )
          )
          DropdownMenuSeparator.displayName = "DropdownMenuSeparator"
          EOF
          
          echo "=== Creating main App component ==="
          cat > src/App.tsx << 'EOF'
          import React from 'react'
          import { Router, Route, Switch } from 'wouter'
          import { ThemeProvider } from './components/theme-provider'
          import { Toaster } from './components/ui/toaster'
          
          // Import all pages
          import OnboardingPage from './pages/onboarding'
          import NotFoundPage from './pages/not-found'
          
          function App() {
            return (
              <ThemeProvider defaultTheme="light" storageKey="optibuy-theme">
                <Router>
                  <div className="min-h-screen bg-background">
                    <Switch>
                      <Route path="/" component={OnboardingPage} />
                      <Route path="/onboarding" component={OnboardingPage} />
                      <Route component={NotFoundPage} />
                    </Switch>
                  </div>
                </Router>
                <Toaster />
              </ThemeProvider>
            )
          }
          
          export default App
          EOF
          
          echo "=== Creating main entry point ==="
          cat > src/main.tsx << 'EOF'
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import App from './App'
          import './index.css'
          
          ReactDOM.createRoot(document.getElementById('root')!).render(
            <React.StrictMode>
              <App />
            </React.StrictMode>,
          )
          EOF
          
          echo "=== Final project structure ==="
          find src -type f | head -70
          ls -la index.html

      - name: Install dependencies and build web assets
        script: |
          echo "=== Current package.json ==="
          cat package.json
          
          echo "=== Installing complete dependencies ==="
          npm install vite @vitejs/plugin-react typescript react react-dom
          npm install @types/react @types/react-dom
          npm install @tailwindcss/postcss postcss autoprefixer
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          echo "=== Installing React app dependencies ==="
          npm install wouter @tanstack/react-query
          npm install @radix-ui/react-slot @radix-ui/react-toast @radix-ui/react-dialog
          npm install @radix-ui/react-select @radix-ui/react-label @radix-ui/react-button
          npm install @radix-ui/react-accordion @radix-ui/react-tabs
          npm install @radix-ui/react-dropdown-menu @radix-ui/react-navigation-menu
          npm install lucide-react react-hook-form @hookform/resolvers
          npm install zod tailwind-merge class-variance-authority clsx
          npm install date-fns react-day-picker
          
          echo "=== Removing old tailwindcss if present ==="
          npm uninstall tailwindcss || echo "tailwindcss not installed"
          
          echo "=== Installing missing Replit plugins as stubs ==="
          npm install --save-dev @replit/vite-plugin-runtime-error-modal @replit/vite-plugin-cartographer || echo "Replit plugins not available, will use clean vite config"
          
          echo "=== Verifying Vite installation ==="
          npx vite --version
          
          echo "=== Replacing Replit-specific vite.config.ts ==="
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              emptyOutDir: true
            },
            resolve: {
              alias: {
                '@': '/src'
              }
            }
          })
          EOF
          
          echo "=== New vite.config.ts content ==="
          cat vite.config.ts
          
          echo "=== Removing conflicting PostCSS configs ==="
          rm -f postcss.config.js postcss.config.ts tailwind.config.js tailwind.config.ts
          
          echo "=== Creating clean PostCSS configuration ==="
          cat > postcss.config.mjs << 'EOF'
          export default {
            plugins: {
              '@tailwindcss/postcss': {},
              autoprefixer: {},
            },
          }
          EOF
          
          echo "=== Creating clean Tailwind config ==="
          cat > tailwind.config.mjs << 'EOF'
          export default {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {
                colors: {
                  border: "hsl(var(--border))",
                  input: "hsl(var(--input))",
                  ring: "hsl(var(--ring))",
                  background: "hsl(var(--background))",
                  foreground: "hsl(var(--foreground))",
                  primary: {
                    DEFAULT: "hsl(var(--primary))",
                    foreground: "hsl(var(--primary-foreground))",
                  },
                  secondary: {
                    DEFAULT: "hsl(var(--secondary))",
                    foreground: "hsl(var(--secondary-foreground))",
                  },
                  destructive: {
                    DEFAULT: "hsl(var(--destructive))",
                    foreground: "hsl(var(--destructive-foreground))",
                  },
                  muted: {
                    DEFAULT: "hsl(var(--muted))",
                    foreground: "hsl(var(--muted-foreground))",
                  },
                  accent: {
                    DEFAULT: "hsl(var(--accent))",
                    foreground: "hsl(var(--accent-foreground))",
                  },
                  popover: {
                    DEFAULT: "hsl(var(--popover))",
                    foreground: "hsl(var(--popover-foreground))",
                  },
                  card: {
                    DEFAULT: "hsl(var(--card))",
                    foreground: "hsl(var(--card-foreground))",
                  },
                },
                borderRadius: {
                  lg: "0.5rem",
                  md: "0.375rem",
                  sm: "0.25rem",
                },
              },
            },
            plugins: [],
          }
          EOF
          
          echo "=== Verifying clean configuration ==="
          ls -la *.config.* *.mjs
          echo "=== PostCSS config content ==="
          cat postcss.config.mjs
          echo "=== Tailwind config content ==="
          cat tailwind.config.mjs
          
          echo "=== Building web assets ==="
          npm run build || npx vite build
          
          echo "=== Verifying build output ==="
          ls -la dist/ 2>/dev/null || echo "No dist/ in client directory"
          ls -la ../dist/public/ 2>/dev/null || echo "No ../dist/public directory"
          
          echo "=== Ensuring dist directory exists for Capacitor ==="
          if [ ! -d "dist" ]; then
            if [ -d "../dist/public" ]; then
              echo "Copying web assets from ../dist/public to ./dist"
              cp -r ../dist/public/* ./dist/ 2>/dev/null || mkdir -p dist && cp -r ../dist/public/* ./dist/
            else
              echo "Creating dist directory and building directly"
              mkdir -p dist
              npx vite build --outDir=dist
            fi
          fi
          
          echo "=== Final verification ==="
          ls -la dist/
          ls -la dist/index.html || echo "ERROR: index.html not found in dist/"

      - name: Create debug keystore
        script: |
          echo "=== Creating debug keystore ==="
          keytool -genkey -v -keystore debug.keystore -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=OptiBuy Debug, O=OptiBuy, C=TR"
          ls -la debug.keystore

      - name: Install Capacitor and add Android platform
        script: |
          echo "=== Removing existing Capacitor config ==="
          rm -f capacitor.config.ts capacitor.config.js capacitor.config.json
          
          echo "=== Verifying dist directory exists ==="
          ls -la dist/ || echo "dist directory missing"
          ls -la dist/index.html || echo "index.html missing in dist"
          
          echo "=== Initializing Capacitor ==="
          npx cap init "OptiBuy" "com.optibuy.collective" --web-dir=dist
          
          echo "=== Verifying Capacitor config created ==="
          cat capacitor.config.json || cat capacitor.config.ts || echo "No config file created"
          
          echo "=== Adding Android platform ==="
          npx cap add android
          
          echo "=== Syncing Capacitor ==="
          npx cap sync android

      - name: Configure Android signing
        script: |
          echo "=== Copying keystore to Android project ==="
          cp debug.keystore android/
          
          echo "=== Creating key.properties ==="
          cat > android/key.properties << 'EOF'
          storePassword=android
          keyPassword=android
          keyAlias=optibuy
          storeFile=debug.keystore
          EOF
          
          echo "=== Modifying build.gradle for proper signing ==="
          cd android
          
          # Backup original build.gradle
          cp app/build.gradle app/build.gradle.backup
          
          # Add signing configuration to build.gradle
          cat > app/build.gradle << 'EOF'
          apply plugin: 'com.android.application'

          android {
              namespace "com.optibuy.collective"
              compileSdk 34

              defaultConfig {
                  applicationId "com.optibuy.collective"
                  minSdk 22
                  targetSdk 34
                  versionCode 1
                  versionName "1.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }

              signingConfigs {
                  release {
                      keyAlias 'optibuy'
                      keyPassword 'android'
                      storeFile file('debug.keystore')
                      storePassword 'android'
                  }
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.release
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }

          repositories {
              google()
              mavenCentral()
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.8.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation project(':capacitor-android')
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }

          apply from: 'capacitor.build.gradle'

          try {
              def servicesJSON = file('google-services.json')
              if (servicesJSON.text) {
                  apply plugin: 'com.google.gms.google-services'
              }
          } catch(Exception e) {
              logger.info("google-services.json not found, google-services plugin not applied. $e")
          }
          EOF
          
          cd ..
          echo "=== Verifying signing configuration ==="
          ls -la android/debug.keystore android/key.properties
          echo "=== build.gradle signing configuration ==="
          grep -A 10 "signingConfigs" android/app/build.gradle

      - name: Build Android AAB
        script: |
          echo "=== Verifying Android project structure ==="
          ls -la android/ || echo "No android directory found"
          ls -la android/app/ || echo "No android/app directory found"
          
          echo "=== Checking web assets were synced ==="
          ls -la android/app/src/main/assets/public/ || echo "No synced web assets found"
          
          cd android
          echo "=== Setting Gradle permissions ==="
          chmod +x gradlew
          
          echo "=== Gradle wrapper version ==="
          ./gradlew --version
          
          echo "=== Checking current build.gradle ==="
          cat app/build.gradle | head -50
          
          echo "=== Verifying keystore setup ==="
          ls -la debug.keystore key.properties
          cat key.properties
          
          echo "=== Clean build ==="
          ./gradlew clean --stacktrace
          
          echo "=== Testing debug build first ==="
          ./gradlew assembleDebug --stacktrace
          ls -la app/build/outputs/apk/debug/
          
          echo "=== Listing available Gradle tasks ==="
          ./gradlew tasks --all | grep -i bundle
          
          echo "=== Building AAB with detailed logging ==="
          ./gradlew bundleRelease --stacktrace --info --debug 2>&1 | tee ../build-log.txt
          BUILD_EXIT_CODE=$?
          
          echo "=== If release build failed, try debug bundle ==="
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "=== Attempting debug bundle build ==="
            ./gradlew bundleDebug --stacktrace --info 2>&1 | tee -a ../build-log.txt
            DEBUG_EXIT_CODE=$?
            echo "=== Debug bundle exit code: $DEBUG_EXIT_CODE ==="
            
            if [ $DEBUG_EXIT_CODE -eq 0 ]; then
              echo "=== Debug bundle successful, using debug AAB ==="
              find . -name "*debug*.aab" -exec ls -lh {} \;
            fi
          fi
          
          echo "=== Build exit code: $BUILD_EXIT_CODE ==="
          
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "=== Build successful, locating AAB file ==="
          else
            echo "=== Build failed, checking for partial outputs ==="
          fi
          
          echo "=== Searching for AAB files ==="
          find . -name "*.aab" -exec ls -lh {} \; -exec echo "Found AAB: {}" \;
          find . -name "*.apk" -exec ls -lh {} \; -exec echo "Found APK: {}" \;
          
          echo "=== Checking expected AAB location ==="
          ls -la app/build/outputs/bundle/release/app-release.aab || echo "AAB not found at expected location"
          
          echo "=== Full build outputs directory ==="
          find app/build/outputs -type f -name "*.aab" -o -name "*.apk" -exec ls -lah {} \;
          
          echo "=== Copying AAB to root for artifact collection ==="
          AAB_FOUND=false
          
          # Try release AAB first
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            cp app/build/outputs/bundle/release/app-release.aab ../optibuy-release.aab
            ls -lah ../optibuy-release.aab
            echo "=== Release AAB copied successfully ==="
            AAB_FOUND=true
          fi
          
          # Try debug AAB if release failed
          if [ "$AAB_FOUND" = false ] && [ -f "app/build/outputs/bundle/debug/app-debug.aab" ]; then
            cp app/build/outputs/bundle/debug/app-debug.aab ../optibuy-debug.aab
            ls -lah ../optibuy-debug.aab
            echo "=== Debug AAB copied successfully ==="
            AAB_FOUND=true
          fi
          
          # Emergency: try to build simple APK instead
          if [ "$AAB_FOUND" = false ]; then
            echo "=== No AAB found, building emergency APK ==="
            ./gradlew assembleRelease --stacktrace 2>&1 | tee -a ../build-log.txt
            
            if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
              cp app/build/outputs/apk/release/app-release.apk ../optibuy-release.apk
              ls -lah ../optibuy-release.apk
              echo "=== Emergency APK created ==="
            fi
          fi
          
          if [ "$AAB_FOUND" = false ]; then
            echo "=== Complete build failure - directory structure debugging ==="
            find app/build -type f -name "*.aab" -o -name "*.apk" | head -20
            echo "=== End debugging ==="
          fi

    artifacts:
      - optibuy-release.aab
      - optibuy-debug.aab
      - optibuy-release.apk
      - android/app/build/outputs/bundle/release/app-release.aab
      - android/app/build/outputs/bundle/debug/app-debug.aab
      - android/app/build/outputs/apk/release/app-release.apk
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      - build-log.txt
