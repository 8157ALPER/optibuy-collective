workflows:
  optibuy-react-to-android:
    name: OptiBuy React to Android AAB
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      node: 18
      groups:
        - android_signing
    scripts:
      - name: Setup React Web App
        script: |
          echo "=== OptiBuy React to Android Conversion ==="
          echo "Converting React web app to Android AAB"
          echo "Package: com.optibuy.collective"
          
          # Check project structure
          echo "=== Project Structure Analysis ==="
          ls -la
          echo "=== Client Directory ==="
          ls -la client/ || echo "No client directory"
          
          # Install root dependencies (includes Vite and build tools)
          echo "=== Installing Root Dependencies ==="
          npm install
          
          # Install client dependencies if client directory exists
          if [ -d "client" ]; then
              echo "=== Installing Client Dependencies ==="
              cd client
              npm install
              cd ..
          fi
          
          # Build the full-stack React app (frontend + backend)
          echo "=== Building React Application ==="
          npm run build
          
          # Verify build output - check both dist/public (frontend) and dist/index.js (backend)
          if [ -d "dist" ] && [ -d "dist/public" ]; then
              echo "✅ React build successful"
              ls -la dist/
              ls -la dist/public/
          else
              echo "❌ React build failed - checking directories"
              ls -la
              [ -d "dist" ] && ls -la dist/
              exit 1
          fi

      - name: Setup Capacitor for Android
        script: |
          # Install Capacitor
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          # Initialize Capacitor (if not already done)
          if [ ! -f "capacitor.config.ts" ]; then
              npx cap init optibuy com.optibuy.collective --web-dir=dist/public
          fi
          
          # Update capacitor config for production
          cat > capacitor.config.ts << 'EOF'
          import { CapacitorConfig } from '@capacitor/core';
          
          const config: CapacitorConfig = {
            appId: 'com.optibuy.collective',
            appName: 'OptiBuy',
            webDir: 'dist/public',
            server: {
              androidScheme: 'https'
            },
            android: {
              buildOptions: {
                keystorePath: 'optibuy-upload-key-production.jks',
                keystoreAlias: 'upload',
                keystorePassword: 'optibuy_upload_2025',
                keystoreAliasPassword: 'optibuy_upload_2025'
              }
            }
          };
          
          export default config;
          EOF

      - name: Create Production Upload Keystore
        script: |
          echo "=== Creating Upload Keystore ==="
          
          # Generate keystore for Google Play upload
          keytool -genkeypair \
            -alias upload \
            -keyalg RSA \
            -keysize 2048 \
            -validity 9125 \
            -keystore optibuy-upload-key-production.jks \
            -dname "CN=OptiBuy Collective, OU=Mobile Apps, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" \
            -storepass "optibuy_upload_2025" \
            -keypass "optibuy_upload_2025"
          
          if [ -f "optibuy-upload-key-production.jks" ]; then
              echo "✅ Upload keystore created"
              keytool -list -v -keystore optibuy-upload-key-production.jks -storepass optibuy_upload_2025 -alias upload | grep "SHA1"
          else
              echo "❌ Failed to create keystore"
              exit 1
          fi

      - name: Add Android Platform
        script: |
          # Add Android platform
          npx cap add android
          
          # Sync web assets to Android
          npx cap sync android
          
          # Verify Android project was created
          if [ -d "android" ]; then
              echo "✅ Android platform added successfully"
              ls -la android/
          else
              echo "❌ Failed to add Android platform"
              exit 1
          fi

      - name: Configure Android Build
        script: |
          # Configure Android app build.gradle
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
              id 'kotlin-android'
              id 'com.capacitor.cordova.bridge'
          }
          
          android {
              namespace 'com.optibuy.collective'
              compileSdk 35
          
              defaultConfig {
                  applicationId "com.optibuy.collective"
                  minSdk 21
                  targetSdk 35
                  versionCode 2
                  versionName "1.2.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  aaptOptions {
                      additionalParameters '--no-version-vectors'
                  }
              }
          
              signingConfigs {
                  release {
                      keyAlias 'upload'
                      keyPassword 'optibuy_upload_2025'
                      storeFile file('../../optibuy-upload-key-production.jks')
                      storePassword 'optibuy_upload_2025'
                  }
              }
          
              buildTypes {
                  release {
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.release
                  }
              }
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_11
                  targetCompatibility JavaVersion.VERSION_11
              }
          
              kotlinOptions {
                  jvmTarget = '11'
              }
          }
          
          repositories {
              google()
              mavenCentral()
          }
          
          dependencies {
              implementation project(':capacitor-android')
              implementation project(':capacitor-app')
              implementation project(':capacitor-haptics')
              implementation project(':capacitor-keyboard')
              implementation project(':capacitor-status-bar')
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.10.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.core:core-ktx:1.12.0'
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }
          
          apply from: 'capacitor.build.gradle'
          
          try {
              def servicesJSON = file('google-services.json')
              if (servicesJSON.text) {
                  apply plugin: 'com.google.gms.google-services'
              }
          } catch(Exception e) {
              logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
          }
          EOF
          
          # Update Android manifest
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
          
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
          
              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher_round"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme"
                  android:usesCleartextTraffic="true">
          
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTask"
                      android:alwaysRetainTaskState="true"
                      android:theme="@style/AppTheme.NoActionBarLaunch"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode">
          
                      <intent-filter android:autoVerify="true">
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
          
                  </activity>
          
                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="${applicationId}.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>
              </application>
          
          </manifest>
          EOF

      - name: Build Android AAB
        script: |
          echo "=== Building Production AAB ==="
          
          # Build the Android App Bundle
          cd android
          ./gradlew bundleRelease
          
          # Verify AAB was created
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
              echo "✅ AAB build successful"
              ls -la app/build/outputs/bundle/release/app-release.aab
              
              # Copy AAB to root for easier access
              cp app/build/outputs/bundle/release/app-release.aab ../optibuy-react-android.aab
              
              echo "=== AAB Information ==="
              unzip -l app/build/outputs/bundle/release/app-release.aab | head -20
          else
              echo "❌ AAB build failed"
              ls -la app/build/outputs/bundle/release/
              exit 1
          fi

    artifacts:
      - android/app/build/outputs/bundle/release/app-release.aab
      - optibuy-upload-key-production.jks
      - android/app/build/outputs/mapping/release/mapping.txt
      - optibuy-react-android.aab
