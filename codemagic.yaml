workflows:
  android-workflow:
    name: Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 18
    scripts:
      - name: Download and extract client archive
        script: |
          echo "=== Downloading client archive ==="
          curl -L -o client-clean.tar.gz "https://github.com/optibuy-collective/optibuy-repo/releases/download/v1.1/client-clean.tar.gz"
          ls -lh client-clean.tar.gz
          
          echo "=== Extracting client archive ==="
          tar -xzf client-clean.tar.gz
          ls -la
          
      - name: Initialize project structure
        script: |
          echo "=== Creating project structure ==="
          mkdir -p src/components src/pages src/lib src/hooks
          
          echo "=== Moving files to proper structure ==="
          find . -maxdepth 1 -name "*.tsx" -o -name "*.ts" -o -name "*.css" | while read file; do
            case "$file" in
              ./App.tsx|./main.tsx|./index.css) mv "$file" src/ ;;
              *) echo "Keeping $file in root" ;;
            esac
          done
          
          find . -maxdepth 1 -name "*-*.tsx" | while read file; do
            mv "$file" src/pages/
          done
          
          find . -maxdepth 1 -name "*.tsx" | grep -v App.tsx | grep -v main.tsx | while read file; do
            mv "$file" src/components/
          done
          
          echo "=== Final project structure ==="
          find src -type f | head -20

      - name: Install dependencies and build web assets
        script: |
          echo "=== Current package.json ==="
          cat package.json
          
          echo "=== Installing complete dependencies ==="
          npm install vite @vitejs/plugin-react typescript react react-dom
          npm install @types/react @types/react-dom
          npm install @tailwindcss/postcss postcss autoprefixer
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          echo "=== Installing missing Replit plugins as stubs ==="
          npm install --save-dev @replit/vite-plugin-runtime-error-modal @replit/vite-plugin-cartographer || echo "Replit plugins not available, will use clean vite config"
          
          echo "=== Verifying Vite installation ==="
          npx vite --version
          
          echo "=== Replacing Replit-specific vite.config.ts ==="
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              emptyOutDir: true
            },
            resolve: {
              alias: {
                '@': '/src'
              }
            }
          })
          EOF
          
          echo "=== New vite.config.ts content ==="
          cat vite.config.ts
          
          echo "=== Creating PostCSS configuration ==="
          cat > postcss.config.js << 'EOF'
          module.exports = {
            plugins: {
              '@tailwindcss/postcss': {},
              autoprefixer: {},
            },
          }
          EOF
          
          echo "=== Creating Tailwind config ==="
          cat > tailwind.config.js << 'EOF'
          module.exports = {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOF
          
          echo "=== Configuration files created ==="
          ls -la *.config.js *.config.ts
          
          echo "=== Building web assets ==="
          npm run build || npx vite build
          ls -la dist/

      - name: Create debug keystore
        script: |
          echo "=== Creating debug keystore ==="
          keytool -genkey -v -keystore debug.keystore -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=OptiBuy Debug, O=OptiBuy, C=TR"
          ls -la debug.keystore

      - name: Install Capacitor and add Android platform
        script: |
          echo "=== Capacitor already installed in previous step ==="
          
          echo "=== Initializing Capacitor ==="
          npx cap init "OptiBuy" "com.optibuy.collective" --web-dir=dist
          
          echo "=== Adding Android platform ==="
          npx cap add android
          
          echo "=== Syncing Capacitor ==="
          npx cap sync android

      - name: Configure Android signing
        script: |
          echo "=== Copying keystore to Android project ==="
          cp debug.keystore android/
          
          echo "=== Creating key.properties ==="
          cat > android/key.properties << 'EOF'
          storePassword=android
          keyPassword=android
          keyAlias=optibuy
          storeFile=debug.keystore
          EOF
          
          echo "=== Verifying files ==="
          ls -la android/debug.keystore android/key.properties

      - name: Build Android AAB
        script: |
          cd android
          echo "=== Setting Gradle permissions ==="
          chmod +x gradlew
          
          echo "=== Checking current build.gradle ==="
          cat app/build.gradle
          
          echo "=== Clean build ==="
          ./gradlew clean
          
          echo "=== Building AAB ==="
          ./gradlew bundleRelease --stacktrace --info
          
          echo "=== Alternative: Building APK ==="
          ./gradlew assembleRelease --stacktrace --info
          
          echo "=== Checking build outputs ==="
          find app/build -name "*.aab" -o -name "*.apk" -exec ls -lh {} \;
          
          echo "=== Build directory structure ==="
          ls -la app/build/outputs/

    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      - debug.keystore
