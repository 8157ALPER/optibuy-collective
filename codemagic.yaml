# MINIMAL MODIFICATION OF SUCCESSFUL BUILD - SIGNING KEY FIX
# Based on proven codemagic-final-solution.yaml with only signing changes

workflows:
  optibuy-signing-fix:
    name: OptiBuy Signing Fix - Minimal Changes
    max_build_duration: 120
    instance_type: mac_mini_m1
    working_directory: .
    environment:
      vars:
        CM_KEYSTORE_PATH: /tmp/keystore
        CM_KEYSTORE: |
          # Upload keystore for Google Play App Signing
        CM_KEYSTORE_PASSWORD: optibuy-upload-2025
        CM_KEY_ALIAS: optibuy-upload
        CM_KEY_PASSWORD: optibuy-upload-2025
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    scripts:
      - name: Minimal signing fix on proven build
        script: |
          # Use exact same Flutter setup as successful build
          flutter create optibuy_collective \
            --org com.optibuy \
            --project-name optibuy_collective \
            --platforms android
          
          cd optibuy_collective
          
          # Same pubspec.yaml as successful build (just version increment)
          cat > pubspec.yaml << 'EOF'
          name: optibuy_collective
          description: OptiBuy Collective Purchasing Platform for Turkish B2B Market
          publish_to: 'none'
          version: 1.0.1+2
          
          environment:
            sdk: '>=3.1.0 <4.0.0'
            flutter: ">=3.13.0"
          
          dependencies:
            flutter:
              sdk: flutter
            cupertino_icons: ^1.0.6
          
          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^3.0.0
          
          flutter:
            uses-material-design: true
            assets:
              - assets/images/
          EOF
          
          # ONLY CHANGE: Generate new upload keystore instead of using release-key
          echo "=== Generating New Upload Keystore ==="
          keytool -genkey -v \
            -keystore upload-key.keystore \
            -alias optibuy-upload \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass optibuy-upload-2025 \
            -keypass optibuy-upload-2025 \
            -dname "CN=OptiBuy Upload, OU=OptiBuy, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR"
          
          # Same gradle wrapper as successful build
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
          EOF
          
          # Same root build.gradle as successful build
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.9.10'
              repositories {
                  google()
                  mavenCentral()
              }
          
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.3.0'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Same local.properties as successful build
          cat > android/local.properties << 'EOF'
          flutter.versionName=1.0.1
          flutter.versionCode=2
          flutter.buildMode=release
          EOF
          
          # Same gradle properties as successful build
          cat > android/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4608m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.parallel=true
          org.gradle.caching=true
          org.gradle.configureondemand=true
          android.enableR8=true
          android.enableR8.fullMode=true
          EOF
          
          # Same proguard rules as successful build
          cat > android/app/proguard-rules.pro << 'EOF'
          -keep class io.flutter.app.** { *; }
          -keep class io.flutter.plugin.**  { *; }
          -keep class io.flutter.util.**  { *; }
          -keep class io.flutter.view.**  { *; }
          -keep class io.flutter.**  { *; }
          -keep class io.flutter.plugins.**  { *; }
          -dontwarn io.flutter.embedding.**
          -keep class * extends java.util.ListResourceBundle {
              protected java.lang.Object[][] getContents();
          }
          -keep class com.google.android.material.** {*;}
          -dontwarn com.google.android.material.**
          -dontnote com.google.android.material.**
          -dontwarn androidx.**
          -keep class androidx.** { *; }
          -keep interface androidx.** { *; }
          EOF
          
          # Same app build.gradle as successful build - ONLY CHANGE: use upload-key instead of release-key
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }
          
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '2'
          }
          
          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0.1'
          }
          
          android {
              namespace "com.optibuy.collective"
              compileSdk 35
              ndkVersion "25.1.8937393"
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              signingConfigs {
                  release {
                      storeFile file("../../upload-key.keystore")
                      storePassword "optibuy-upload-2025"
                      keyAlias "optibuy-upload"
                      keyPassword "optibuy-upload-2025"
                  }
              }
          
              defaultConfig {
                  applicationId "com.optibuy.collective"
                  minSdk 21
                  targetSdk 35
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }
          
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10'
          }
          EOF
          
          # Same AndroidManifest.xml as successful build
          mkdir -p android/app/src/main
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              
              <application
                  android:label="OptiBuy"
                  android:name="${applicationName}"
                  android:icon="@mipmap/ic_launcher"
                  android:theme="@style/LaunchTheme"
                  android:exported="false">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:taskAffinity=""
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      
                      <meta-data
                          android:name="io.flutter.embedding.android.NormalTheme"
                          android:resource="@style/NormalTheme" />
                      
                      <intent-filter android:autoVerify="true">
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
                  
                  <meta-data
                      android:name="flutterEmbedding"
                      android:value="2" />
              </application>
              
              <queries>
                  <intent>
                      <action android:name="android.intent.action.VIEW" />
                      <data android:scheme="https" />
                  </intent>
                  <intent>
                      <action android:name="android.intent.action.VIEW" />
                      <data android:scheme="http" />
                  </intent>
              </queries>
          </manifest>
          EOF
          
          # Same MainActivity as successful build
          mkdir -p android/app/src/main/kotlin/com/optibuy/collective
          cat > android/app/src/main/kotlin/com/optibuy/collective/MainActivity.kt << 'EOF'
          package com.optibuy.collective
          
          import io.flutter.embedding.android.FlutterActivity
          
          class MainActivity: FlutterActivity() {
          }
          EOF
          
          # Same main.dart as successful build
          cat > lib/main.dart << 'EOF'
          import 'package:flutter/material.dart';
          
          void main() {
            runApp(const OptiBuyApp());
          }
          
          class OptiBuyApp extends StatelessWidget {
            const OptiBuyApp({super.key});
          
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'OptiBuy - Collective Purchasing',
                theme: ThemeData(
                  primarySwatch: Colors.blue,
                  useMaterial3: true,
                ),
                home: const OptiBuyHomePage(),
                debugShowCheckedModeBanner: false,
              );
            }
          }
          
          class OptiBuyHomePage extends StatefulWidget {
            const OptiBuyHomePage({super.key});
          
            @override
            State<OptiBuyHomePage> createState() => _OptiBuyHomePageState();
          }
          
          class _OptiBuyHomePageState extends State<OptiBuyHomePage> {
            int _selectedIndex = 0;
          
            static const List<Widget> _pages = <Widget>[
              HomePage(),
              ProductsPage(),
              ProfilePage(),
            ];
          
            void _onItemTapped(int index) {
              setState(() {
                _selectedIndex = index;
              });
            }
          
            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('OptiBuy Collective Purchasing'),
                  backgroundColor: Colors.blue.shade600,
                  foregroundColor: Colors.white,
                  elevation: 2,
                ),
                body: _pages[_selectedIndex],
                bottomNavigationBar: BottomNavigationBar(
                  items: const <BottomNavigationBarItem>[
                    BottomNavigationBarItem(
                      icon: Icon(Icons.home),
                      label: 'Home',
                    ),
                    BottomNavigationBarItem(
                      icon: Icon(Icons.shopping_cart),
                      label: 'Products',
                    ),
                    BottomNavigationBarItem(
                      icon: Icon(Icons.person),
                      label: 'Profile',
                    ),
                  ],
                  currentIndex: _selectedIndex,
                  selectedItemColor: Colors.blue.shade600,
                  onTap: _onItemTapped,
                ),
              );
            }
          }
          
          class HomePage extends StatelessWidget {
            const HomePage({super.key});
          
            @override
            Widget build(BuildContext context) {
              return const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.home, size: 80, color: Colors.blue),
                    SizedBox(height: 16),
                    Text('Welcome to OptiBuy', style: TextStyle(fontSize: 24)),
                    Text('Turkish B2B Collective Purchasing Platform', style: TextStyle(color: Colors.grey)),
                  ],
                ),
              );
            }
          }
          
          class ProductsPage extends StatelessWidget {
            const ProductsPage({super.key});
          
            @override
            Widget build(BuildContext context) {
              return const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.shopping_cart, size: 80, color: Colors.blue),
                    SizedBox(height: 16),
                    Text('Products', style: TextStyle(fontSize: 24)),
                    Text('Browse collective purchase opportunities', style: TextStyle(color: Colors.grey)),
                  ],
                ),
              );
            }
          }
          
          class ProfilePage extends StatelessWidget {
            const ProfilePage({super.key});
          
            @override
            Widget build(BuildContext context) {
              return const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.person, size: 80, color: Colors.blue),
                    SizedBox(height: 16),
                    Text('Profile', style: TextStyle(fontSize: 24)),
                    Text('Manage your account settings', style: TextStyle(color: Colors.grey)),
                  ],
                ),
              );
            }
          }
          EOF
          
          # Generate upload certificate for Google Play
          echo "=== Generating Upload Certificate ==="
          keytool -export -rfc \
            -keystore upload-key.keystore \
            -alias optibuy-upload \
            -storepass optibuy-upload-2025 \
            -file upload-certificate.pem
          
          # Same build process as successful build
          flutter pub get
          flutter clean
          flutter pub get
          
          # Same build command as successful build - only keystore changed
          echo "=== Building AAB with Upload Key ==="
          flutter build appbundle --release \
            --target-platform android-arm64,android-arm,android-x64 \
            --build-name=1.0.1 \
            --build-number=2 \
            --obfuscate \
            --split-debug-info=build/app/outputs/symbols
          
          # Same verification as successful build
          echo "=== Copying AAB file ==="
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
              cp build/app/outputs/bundle/release/app-release.aab ../optibuy-signing-fix.aab
              cp upload-certificate.pem ../optibuy-upload-certificate.pem
              echo "AAB file copied successfully"
          else
              echo "ERROR: AAB file not found at expected location"
              find . -name "*.aab" -type f
              exit 1
          fi
          
          # Same build verification as successful build
          echo "=== Build Verification ==="
          if [ -f "../optibuy-signing-fix.aab" ]; then
              ls -lh ../optibuy-signing-fix.aab
              echo "AAB Size: $(ls -lh ../optibuy-signing-fix.aab | awk '{print $5}')"
          else
              echo "ERROR: AAB file missing after copy"
              exit 1
          fi
          
          echo "=== SUCCESS: Minimal Signing Fix Complete ==="
          echo "1. Same proven build configuration"
          echo "2. Only changed: release-key.keystore -> upload-key.keystore"
          echo "3. Generated: upload-certificate.pem for Google Play"
          echo "4. Android 15 compliant (API 35)"
          
    artifacts:
      - optibuy-signing-fix.aab
      - optibuy-upload-certificate.pem
      - build/app/outputs/bundle/release/app-release.aab
