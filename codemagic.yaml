workflows:
  android-workflow:
    name: OptiBuy Android AAB Build (Debug Signing)
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 22.12.0
    scripts:
      - name: Reorganize scattered files into proper structure
        script: |
          echo "=== Repository Analysis ==="
          ls -la
          echo "=== Creating proper project structure ==="
          
          mkdir -p client/src client/public
          mkdir -p server shared dist/public
          
          cat > client/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
          echo "Moving React files to client/src..."
          for file in *.tsx *.jsx; do
            if [ -f "$file" ] && [[ "$file" != "vite.config.ts" ]] && [[ "$file" != "tailwind.config.ts" ]]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          for file in main.ts App.ts index.ts utils.ts queryClient.ts; do
            if [ -f "$file" ]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          for file in *.css; do
            if [ -f "$file" ]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          mkdir -p client/src/components/ui
          mkdir -p client/src/pages
          mkdir -p client/src/hooks
          mkdir -p client/src/lib
          
          for file in alert-dialog.tsx aspect-ratio.tsx avatar.tsx badge.tsx button.tsx card.tsx checkbox.tsx dialog.tsx dropdown-menu.tsx form.tsx input.tsx label.tsx popover.tsx scroll-area.tsx select.tsx separator.tsx sheet.tsx skeleton.tsx slider.tsx switch.tsx table.tsx tabs.tsx textarea.tsx toast.tsx toaster.tsx toggle.tsx tooltip.tsx; do
            if [ -f "$file" ]; then
              cp "$file" client/src/components/ui/ 2>/dev/null || true
            fi
          done
          
          for file in *dashboard*.tsx *profile*.tsx *plans*.tsx *categories*.tsx *onboarding*.tsx; do
            if [ -f "$file" ]; then
              cp "$file" client/src/pages/ 2>/dev/null || true
            fi
          done
          
          for file in use-*.tsx use-*.ts; do
            if [ -f "$file" ]; then
              cp "$file" client/src/hooks/ 2>/dev/null || true
            fi
          done
          
          echo "=== Final structure ==="
          find client -type f | head -20

      - name: Create client package.json and install dependencies
        script: |
          cat > client/package.json << 'EOF'
          {
            "name": "optibuy-client",
            "version": "1.0.0",
            "type": "module",
            "scripts": {
              "build": "vite build --outDir ../dist/public",
              "dev": "vite",
              "preview": "vite preview"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@types/react": "^18.2.66",
              "@types/react-dom": "^18.2.22",
              "wouter": "^3.3.5",
              "@tanstack/react-query": "^5.51.23",
              "@hookform/resolvers": "^3.9.0",
              "react-hook-form": "^7.52.2",
              "zod": "^3.23.8",
              "lucide-react": "^0.427.0",
              "clsx": "^2.1.1",
              "tailwind-merge": "^2.5.2",
              "class-variance-authority": "^0.7.0"
            },
            "devDependencies": {
              "@vitejs/plugin-react": "^4.3.1",
              "vite": "^5.4.0",
              "typescript": "^5.5.3",
              "tailwindcss": "^3.4.9",
              "autoprefixer": "^10.4.20",
              "postcss": "^8.4.41"
            }
          }
          EOF
          
          cat > client/vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          import path from 'path'
          
          export default defineConfig({
            plugins: [react()],
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
              },
            },
            build: {
              outDir: '../dist/public',
              emptyOutDir: true,
            },
          })
          EOF
          
          cat > client/postcss.config.js << 'EOF'
          export default {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
          
          cat > client/tailwind.config.js << 'EOF'
          /** @type {import('tailwindcss').Config} */
          export default {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOF
          
          cat > client/src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          
          :root {
            font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
            line-height: 1.5;
            font-weight: 400;
          }
          
          body {
            margin: 0;
            display: flex;
            place-items: center;
            min-width: 320px;
            min-height: 100vh;
          }
          
          #root {
            max-width: 1280px;
            margin: 0 auto;
            padding: 2rem;
            text-align: center;
          }
          EOF
          
          cat > client/src/main.tsx << 'EOF'
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import './index.css'
          
          function App() {
            return (
              <div className="min-h-screen bg-gray-100 flex items-center justify-center">
                <div className="bg-white p-8 rounded-lg shadow-md">
                  <h1 className="text-2xl font-bold text-gray-900 mb-4">OptiBuy</h1>
                  <p className="text-gray-600">Collective Purchase Platform</p>
                  <p className="text-sm text-gray-500 mt-2">Ready for Android build</p>
                </div>
              </div>
            )
          }
          
          ReactDOM.createRoot(document.getElementById('root')!).render(
            <React.StrictMode>
              <App />
            </React.StrictMode>,
          )
          EOF
          
          echo "=== Installing root dependencies ==="
          npm install
          echo "=== Installing client dependencies ==="
          cd client
          npm install
          cd ..

      - name: Build web assets
        script: |
          echo "=== Building web assets ==="
          cd client
          echo "Installing additional dependencies..."
          npm install tailwindcss autoprefixer postcss
          echo "Building from organized client directory..."
          npx vite build

      - name: Create debug keystore
        script: |
          echo "=== Creating debug keystore for closed testing ==="
          keytool -genkey -v -keystore debug.keystore -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=OptiBuy Debug, OU=Development, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" -storepass android -keypass android
          echo "Debug keystore created successfully"
          ls -la debug.keystore

      - name: Set up Java
        script: |
          echo 'export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home"' >> ~/.zshrc
          source ~/.zshrc

      - name: Setup Android SDK
        script: |
          echo 'export ANDROID_SDK_ROOT="$HOME/programs/android-sdk-macosx"' >> ~/.zshrc
          echo 'export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools' >> ~/.zshrc
          source ~/.zshrc

      - name: Install Capacitor and add Android platform
        script: |
          echo "=== Cleaning up conflicting configs ==="
          rm -f capacitor.config.ts capacitor.config.json
          
          echo "=== Installing Capacitor dependencies locally ==="
          npm install @capacitor/core @capacitor/cli @capacitor/android typescript
          
          echo "=== Creating package.json if missing ==="
          if [ ! -f "package.json" ]; then
            cat > package.json << 'EOF'
          {
            "name": "optibuy-app",
            "version": "1.0.0",
            "main": "index.js",
            "scripts": {
              "build": "echo 'Build complete'"
            },
            "dependencies": {
              "@capacitor/core": "^6.0.0",
              "@capacitor/cli": "^6.0.0",
              "@capacitor/android": "^6.0.0"
            }
          }
          EOF
          fi
          
          echo "=== Creating Capacitor configuration ==="
          cat > capacitor.config.ts << 'EOF'
          import type { CapacitorConfig } from '@capacitor/cli';
          
          const config: CapacitorConfig = {
            appId: 'com.optibuy.collective',
            appName: 'OptiBuy',
            webDir: 'dist/public',
            server: {
              androidScheme: 'https'
            }
          };
          
          export default config;
          EOF
          
          echo "=== Verifying web directory exists ==="
          ls -la dist/public/
          
          echo "=== Initializing Capacitor project ==="
          npx cap init "OptiBuy" "com.optibuy.collective" --web-dir="dist/public"
          
          echo "=== Adding Android platform ==="
          npx cap add android
          
          echo "=== Verifying Android platform added ==="
          ls -la android/

      - name: Configure debug signing in Android project
        script: |
          echo "=== Configuring debug signing ==="
          cp debug.keystore android/
          cat > android/key.properties << 'EOF'
          storePassword=android
          keyPassword=android
          keyAlias=optibuy
          storeFile=debug.keystore
          EOF
          
          echo "=== Adding signing config to build.gradle ==="
          cat >> android/app/build.gradle << 'EOF'

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias'] ?: 'optibuy'
            keyPassword keystoreProperties['keyPassword'] ?: 'android'
            storeFile file(keystoreProperties['storeFile'] ?: 'debug.keystore')
            storePassword keystoreProperties['storePassword'] ?: 'android'
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}
EOF
          
          echo "=== Verifying keystore and config ==="
          ls -la android/debug.keystore android/key.properties

      - name: Sync Capacitor
        script: |
          npx cap sync android

      - name: Build Android AAB with debug signing
        script: |
          cd android
          echo "=== Gradle wrapper permissions ==="
          chmod +x gradlew
          
          echo "=== Checking Android project structure ==="
          ls -la app/src/main/
          
          echo "=== Clean build ==="
          ./gradlew clean
          
          echo "=== Building AAB with debug keystore ==="
          ./gradlew bundleRelease --info --stacktrace
          
          echo "=== Checking build outputs ==="
          ls -la app/build/outputs/
          find app/build/outputs -name "*.aab" -exec ls -lh {} \;
          
          echo "=== If no AAB found, try alternative build ==="
          if [ ! -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "AAB not found, trying assembleRelease..."
            ./gradlew assembleRelease --info
            find app/build/outputs -name "*.apk" -exec ls -lh {} \;
          fi

      - name: Display build info
        script: |
          echo "=== AAB Build Complete ==="
          find android/app/build/outputs -name "*.aab" -exec ls -lh {} \;
          echo "=== Debug AAB ready for Google Play Console closed testing ==="

    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
      - debug.keystore
      - android/app/build/outputs/bundle/release/
      - android/app/build/outputs/apk/release/
