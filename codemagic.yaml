workflows:
  android-workflow:
    name: OptiBuy Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 22.12.0
    scripts:
      - name: Extract source code archives
        script: |
          echo "=== Repository contents ==="
          ls -la
          echo "=== Extracting archives ==="
          if [ -f "client.tar.gz" ]; then
            echo "Extracting client.tar.gz..."
            tar -xzf client.tar.gz
          fi
          if [ -f "server.tar.gz" ]; then
            echo "Extracting server.tar.gz..."
            tar -xzf server.tar.gz
          fi
          if [ -f "shared.tar.gz" ]; then
            echo "Extracting shared.tar.gz..."
            tar -xzf shared.tar.gz
          fi
          echo "=== After extraction ==="
          ls -la
      - name: Install dependencies
        script: |
          npm install
      - name: Build web assets
        script: |
          echo "=== Building web assets ==="
          echo "Checking for vite binary..."
          find . -name "vite" -type f 2>/dev/null | head -5
          echo "Node modules structure:"
          ls -la node_modules/.bin/ | grep vite || echo "Vite not found in node_modules/.bin"
          if [ -d "client" ]; then
            echo "Client directory found, building from client/"
            cd client
            if [ -f "../node_modules/.bin/vite" ]; then
              echo "Using ../node_modules/.bin/vite"
              ../node_modules/.bin/vite build --outDir ../dist/public
            elif [ -f "./node_modules/.bin/vite" ]; then
              echo "Using ./node_modules/.bin/vite"
              ./node_modules/.bin/vite build --outDir ../dist/public
            else
              echo "Using npx vite"
              npx vite build --outDir ../dist/public
            fi
          else
            echo "ERROR: Client directory still missing after extraction"
            exit 1
          fi
      - name: Setup Android signing
        script: |
          echo $CM_KEYSTORE | base64 --decode > $CM_KEYSTORE_PATH
          cat >> "$CM_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_ALIAS_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=$CM_KEYSTORE_PATH
          EOF
      - name: Set up Java
        script: |
          echo 'export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home"' >> ~/.zshrc
          source ~/.zshrc
      - name: Setup Android SDK
        script: |
          echo 'export ANDROID_SDK_ROOT="$HOME/programs/android-sdk-macosx"' >> ~/.zshrc
          echo 'export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools' >> ~/.zshrc
          source ~/.zshrc
      - name: Add Android platform
        script: |
          npx cap add android
      - name: Sync Capacitor
        script: |
          npx cap sync android
      - name: Build Android AAB
        script: |
          cd android
          ./gradlew bundleRelease
      - name: Display build info
        script: |
          echo "=== AAB Build Complete ==="
          find android/app/build/outputs -name "*.aab" -exec ls -lh {} \;
          echo "Download the AAB file from artifacts and manually upload to Google Play Console"
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/mapping.txt

  ios-workflow:
    name: OptiBuy iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.optibuy.collective
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
      node: 22.12.0
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install dependencies
        script: |
          npm ci
      - name: Build web assets
        script: |
          npm run build
      - name: Add iOS platform
        script: |
          npx cap add ios
      - name: Sync Capacitor
        script: |
          npx cap sync ios
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
