workflows:
  android-workflow:
    name: OptiBuy Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 22.12.0
    scripts:
      - name: Reorganize scattered files into proper structure
        script: |
          echo "=== Repository Analysis ==="
          ls -la
          echo "=== Creating proper project structure ==="
          
          # Create necessary directories
          mkdir -p client/src client/public
          mkdir -p server shared dist/public
          
          # Create basic index.html for client
          cat > client/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
          # Move React/TypeScript files to client/src
          echo "Moving React files to client/src..."
          for file in *.tsx *.jsx; do
            if [ -f "$file" ] && [[ "$file" != "vite.config.ts" ]] && [[ "$file" != "tailwind.config.ts" ]]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          # Move specific TypeScript files (excluding config files)
          for file in main.ts App.ts index.ts utils.ts queryClient.ts; do
            if [ -f "$file" ]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          # Move CSS files
          for file in *.css; do
            if [ -f "$file" ]; then
              cp "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          # Create components directory and move UI components
          mkdir -p client/src/components/ui
          mkdir -p client/src/pages
          mkdir -p client/src/hooks
          mkdir -p client/src/lib
          
          # Move UI component files to proper locations
          for file in alert-dialog.tsx aspect-ratio.tsx avatar.tsx badge.tsx button.tsx card.tsx checkbox.tsx dialog.tsx dropdown-menu.tsx form.tsx input.tsx label.tsx popover.tsx scroll-area.tsx select.tsx separator.tsx sheet.tsx skeleton.tsx slider.tsx switch.tsx table.tsx tabs.tsx textarea.tsx toast.tsx toaster.tsx toggle.tsx tooltip.tsx; do
            if [ -f "$file" ]; then
              cp "$file" client/src/components/ui/ 2>/dev/null || true
            fi
          done
          
          # Move page components
          for file in *dashboard*.tsx *profile*.tsx *plans*.tsx *categories*.tsx *onboarding*.tsx; do
            if [ -f "$file" ]; then
              cp "$file" client/src/pages/ 2>/dev/null || true
            fi
          done
          
          # Move hooks
          for file in use-*.tsx use-*.ts; do
            if [ -f "$file" ]; then
              cp "$file" client/src/hooks/ 2>/dev/null || true
            fi
          done
          
          echo "=== Final structure ==="
          find client -type f | head -20
      - name: Create client package.json and install dependencies
        script: |
          cat > client/package.json << 'EOF'
          {
            "name": "optibuy-client",
            "version": "1.0.0",
            "type": "module",
            "scripts": {
              "build": "vite build --outDir ../dist/public",
              "dev": "vite",
              "preview": "vite preview"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@types/react": "^18.2.66",
              "@types/react-dom": "^18.2.22",
              "wouter": "^3.3.5",
              "@tanstack/react-query": "^5.51.23",
              "@hookform/resolvers": "^3.9.0",
              "react-hook-form": "^7.52.2",
              "zod": "^3.23.8",
              "lucide-react": "^0.427.0",
              "clsx": "^2.1.1",
              "tailwind-merge": "^2.5.2",
              "class-variance-authority": "^0.7.0"
            },
            "devDependencies": {
              "@vitejs/plugin-react": "^4.3.1",
              "vite": "^5.4.0",
              "typescript": "^5.5.3",
              "tailwindcss": "^3.4.9",
              "autoprefixer": "^10.4.20",
              "postcss": "^8.4.41"
            }
          }
          EOF
          
          cat > client/vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          import path from 'path'
          
          export default defineConfig({
            plugins: [react()],
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
              },
            },
            build: {
              outDir: '../dist/public',
              emptyOutDir: true,
            },
          })
          EOF
          
          echo "=== Installing root dependencies ==="
          npm install
          echo "=== Installing client dependencies ==="
          cd client
          npm install
          cd ..
      - name: Build web assets
        script: |
          echo "=== Building web assets ==="
          cd client
          echo "Building from organized client directory..."
          npx vite build
      - name: Setup Android signing
        script: |
          echo "=== Setting up Android signing ==="
          if [ -z "$CM_KEYSTORE" ]; then
            echo "WARNING: CM_KEYSTORE environment variable is empty"
            echo "Creating temporary debug keystore for testing..."
            keytool -genkey -v -keystore keystore.jks -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=OptiBuy Debug, OU=Development, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" \
              -storepass android -keypass android
            echo "Debug keystore created successfully"
            export CM_KEYSTORE_PATH="$PWD/keystore.jks"
            export CM_KEYSTORE_PASSWORD="android"
            export CM_KEY_ALIAS_PASSWORD="android" 
            export CM_KEY_ALIAS="optibuy"
          else
            echo "Decoding production keystore from CM_KEYSTORE..."
            echo $CM_KEYSTORE | base64 --decode > $CM_KEYSTORE_PATH
            if [ $? -eq 0 ]; then
              echo "Production keystore decoded successfully"
            else
              echo "ERROR: Failed to decode CM_KEYSTORE - creating debug fallback"
              keytool -genkey -v -keystore keystore.jks -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 \
                -dname "CN=OptiBuy Debug, OU=Development, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" \
                -storepass android -keypass android
              export CM_KEYSTORE_PATH="$PWD/keystore.jks"
              export CM_KEYSTORE_PASSWORD="android"
              export CM_KEY_ALIAS_PASSWORD="android"
              export CM_KEY_ALIAS="optibuy"
            fi
          fi
          ls -la $CM_KEYSTORE_PATH
          cat >> "$CM_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_ALIAS_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=$CM_KEYSTORE_PATH
          EOF
      - name: Set up Java
        script: |
          echo 'export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home"' >> ~/.zshrc
          source ~/.zshrc
      - name: Setup Android SDK
        script: |
          echo 'export ANDROID_SDK_ROOT="$HOME/programs/android-sdk-macosx"' >> ~/.zshrc
          echo 'export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools' >> ~/.zshrc
          source ~/.zshrc
      - name: Add Android platform
        script: |
          npx cap add android
      - name: Sync Capacitor
        script: |
          npx cap sync android
      - name: Build Android AAB
        script: |
          cd android
          ./gradlew bundleRelease
      - name: Display build info
        script: |
          echo "=== AAB Build Complete ==="
          find android/app/build/outputs -name "*.aab" -exec ls -lh {} \;
          echo "Download the AAB file from artifacts and manually upload to Google Play Console"
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/mapping.txt

  ios-workflow:
    name: OptiBuy iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.optibuy.collective
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
      node: 22.12.0
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install dependencies
        script: |
          npm ci
      - name: Build web assets
        script: |
          npm run build
      - name: Add iOS platform
        script: |
          npx cap add ios
      - name: Sync Capacitor
        script: |
          npx cap sync ios
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
