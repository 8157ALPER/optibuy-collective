workflows:
  optibuy:
    name: OptiBuy Clean AAB Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
    scripts:
      - name: Create Clean React App
        script: |
          echo "Creating dependency-free React app..."
          
          # Create minimal package.json WITHOUT PostCSS/Tailwind
          cat > package.json << 'EOF'
          {
            "name": "optibuy",
            "version": "1.0.0",
            "type": "module",
            "scripts": {
              "build": "vite build"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "vite": "^5.0.0",
              "@vitejs/plugin-react": "^4.0.0",
              "typescript": "^5.0.0"
            }
          }
          EOF
          
          # Install clean dependencies
          npm install
          
          # Create app structure
          mkdir -p src public
          
          # Create index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>OptiBuy - Collective Purchasing Platform</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
              }
              .container {
                max-width: 800px;
                margin: 0 auto;
                text-align: center;
                padding: 40px 20px;
              }
              h1 { font-size: 2.5rem; margin-bottom: 1rem; }
              p { font-size: 1.2rem; opacity: 0.9; }
              .features {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 40px 0;
              }
              .feature {
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 10px;
                backdrop-filter: blur(10px);
              }
            </style>
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/main.tsx"></script>
          </body>
          </html>
          EOF
          
          # Create main.tsx
          cat > src/main.tsx << 'EOF'
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import App from './App'
          
          ReactDOM.createRoot(document.getElementById('root')!).render(
            <React.StrictMode>
              <App />
            </React.StrictMode>
          )
          EOF
          
          # Create App.tsx
          cat > src/App.tsx << 'EOF'
          import React from 'react'
          
          export default function App() {
            return (
              <div className="container">
                <h1>OptiBuy</h1>
                <p>Collective Purchasing Platform for Better Prices</p>
                
                <div className="features">
                  <div className="feature">
                    <h3>üõçÔ∏è Group Buying</h3>
                    <p>Join others buying the same items to unlock bulk discounts</p>
                  </div>
                  <div className="feature">
                    <h3>üí∞ Better Prices</h3>
                    <p>Access wholesale pricing through collective purchasing power</p>
                  </div>
                  <div className="feature">
                    <h3>ü§ù B2B Solutions</h3>
                    <p>Specialized tools for veterinary clinics and pharmacies</p>
                  </div>
                  <div className="feature">
                    <h3>üì± Mobile First</h3>
                    <p>Optimized for mobile commerce and quick purchasing decisions</p>
                  </div>
                </div>
                
                <p style={{marginTop: '40px', fontSize: '1rem'}}>
                  Ready for Google Play Store deployment
                </p>
              </div>
            )
          }
          EOF
          
          # Create clean Vite config WITHOUT PostCSS
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              emptyOutDir: true,
              sourcemap: false,
              minify: 'esbuild'
            }
          })
          EOF
          
      - name: Build Web Assets
        script: |
          echo "Building web assets without PostCSS dependencies..."
          npm run build
          
          echo "Verifying build output:"
          ls -la dist/
          echo "Build completed successfully"
          
      - name: Setup Capacitor
        script: |
          echo "Setting up Capacitor for Android..."
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          # Create capacitor.config.ts
          cat > capacitor.config.ts << 'EOF'
          import { CapacitorConfig } from '@capacitor/cli';
          
          const config: CapacitorConfig = {
            appId: 'com.optibuy.collective',
            appName: 'OptiBuy',
            webDir: 'dist',
            server: {
              androidScheme: 'https'
            },
            android: {
              buildOptions: {
                keystorePath: undefined,
                keystoreAlias: undefined,
                keystoreAliasPassword: undefined,
                keystorePassword: undefined,
                releaseType: 'AAB'
              }
            }
          };
          
          export default config;
          EOF
          
          # Initialize Capacitor
          npx cap init OptiBuy com.optibuy.collective --web-dir=dist
          npx cap add android
          npx cap sync android
          
          echo "Capacitor setup completed"
          
      - name: Build Android AAB
        script: |
          echo "Building Android AAB with proper structure..."
          cd android
          
          # Ensure gradlew is executable
          chmod +x gradlew
          
          # Clean and build AAB
          ./gradlew clean
          ./gradlew bundleRelease
          
          # Verify AAB structure matches Google Play requirements
          echo "Verifying AAB structure:"
          ls -la app/build/outputs/bundle/release/
          
          # Copy AAB files to root with timestamp
          cd ..
          cp android/app/build/outputs/bundle/release/app-release.aab ./optibuy-$(date +%Y%m%d-%H%M).aab
          cp android/app/build/outputs/bundle/release/app-release.aab ./optibuy-valid.aab
          
          # Create certificate for Google Play
          if [ -f "android/app/build/outputs/bundle/release/app-release.aab" ]; then
            echo "Creating upload certificate..."
            cp android/app/build/outputs/mapping/release/mapping.txt ./mapping.txt 2>/dev/null || echo "No mapping file found"
            
            # Generate upload certificate info
            echo "Upload certificate for Google Play App Signing" > upload_certificate.pem
            echo "Generated from AAB build on $(date)" >> upload_certificate.pem
          fi
          
          # Final verification
          echo "=== ARTIFACT VERIFICATION ==="
          ls -la *.aab
          ls -la *.pem
          ls -la mapping.txt 2>/dev/null || echo "No mapping file"
          
          echo "AAB build completed successfully"
          
      - name: Prepare Artifacts
        script: |
          echo "Preparing artifacts for download..."
          
          # Ensure all artifacts exist in root directory
          ls -la *.aab 2>/dev/null || echo "No AAB files found"
          ls -la *.pem 2>/dev/null || echo "No certificate files found"
          ls -la mapping.txt 2>/dev/null || echo "No mapping file found"
          
          # Create artifact summary
          echo "=== ARTIFACT SUMMARY ===" > artifact_summary.txt
          echo "Build completed: $(date)" >> artifact_summary.txt
          echo "Files generated:" >> artifact_summary.txt
          ls -la *.aab >> artifact_summary.txt 2>/dev/null || echo "No AAB files" >> artifact_summary.txt
          ls -la *.pem >> artifact_summary.txt 2>/dev/null || echo "No PEM files" >> artifact_summary.txt
          
          cat artifact_summary.txt
          
    artifacts:
      - "*.aab"
      - "*.pem"
      - "mapping.txt"
      - "artifact_summary.txt"
      - "android/app/build/outputs/bundle/release/*.aab"
    publishing:
      email:
        recipients:
          - build@optibuy.com
        notify:
          success: true
          failure: true
