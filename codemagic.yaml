# Minimal Working React-to-AAB Build
# Simplified approach for guaranteed AAB generation

workflows:
  minimal-aab:
    name: Minimal React AAB Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
    
    scripts:
      - name: Setup and Create React App
        script: |
          echo "=== Creating minimal React project ==="
          
          # Create package.json
          cat > package.json << 'EOF'
          {
            "name": "optibuy",
            "version": "1.0.0",
            "scripts": {
              "build": "vite build"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            "devDependencies": {
              "vite": "^5.0.0",
              "@vitejs/plugin-react": "^4.0.0",
              "typescript": "^5.0.0",
              "tailwindcss": "^3.3.0",
              "autoprefixer": "^10.4.0",
              "postcss": "^8.4.0"
            }
          }
          EOF
          
          # Create directories
          mkdir -p src public
          
          # Create index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.jsx"></script>
            </body>
          </html>
          EOF
          
          # Create index.css with Tailwind
          cat > src/index.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          EOF
          
          # Create App.jsx
          cat > src/App.jsx << 'EOF'
          import './index.css'
          
          function App() {
            return (
              <div className="p-5 text-center">
                <h1 className="text-2xl font-bold mb-4">OptiBuy - Collective Purchasing</h1>
                <p className="mb-4">Discover invisible buying neighbors for bulk discounts</p>
                <button 
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  onClick={() => alert('Welcome to OptiBuy!')}
                >
                  Get Started
                </button>
              </div>
            )
          }
          export default App
          EOF
          
          # Create main.jsx
          cat > src/main.jsx << 'EOF'
          import React from 'react'
          import ReactDOM from 'react-dom/client'
          import App from './App'
          
          ReactDOM.createRoot(document.getElementById('root')).render(<App />)
          EOF
          
          # Create vite.config.js
          cat > vite.config.js << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist'
            }
          })
          EOF
          
          # Create postcss.config.js
          cat > postcss.config.js << 'EOF'
          export default {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
          
          # Create tailwind.config.js
          cat > tailwind.config.js << 'EOF'
          /** @type {import('tailwindcss').Config} */
          export default {
            content: [
              "./index.html",
              "./src/**/*.{js,ts,jsx,tsx}",
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          EOF
          
          # Create tsconfig.json for Capacitor
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "useDefineForClassFields": true,
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "module": "ESNext",
              "skipLibCheck": true,
              "moduleResolution": "bundler",
              "allowImportingTsExtensions": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "react-jsx",
              "strict": true,
              "noUnusedLocals": true,
              "noUnusedParameters": true,
              "noFallthroughCasesInSwitch": true
            },
            "include": ["src"],
            "references": [{ "path": "./tsconfig.node.json" }]
          }
          EOF

      - name: Build and Setup Capacitor
        script: |
          echo "=== Installing dependencies ==="
          npm install
          
          echo "=== Building React app ==="
          npm run build
          ls -la dist/
          
          echo "=== Installing Capacitor ==="
          npm install @capacitor/core @capacitor/cli @capacitor/android
          
          echo "=== Initialize Capacitor ==="
          npx cap init OptiBuy com.optibuy.collective --web-dir=dist
          
          echo "=== Add Android platform ==="
          npx cap add android
          
          echo "=== Sync web assets ==="
          npx cap sync android

      - name: Set up signing
        script: |
          echo "=== Creating release keystore ==="
          keytool -genkey -v -keystore release.keystore -alias optibuy -keyalg RSA -keysize 2048 -validity 10000 -storepass anyque123 -keypass anyque123 -dname "CN=OptiBuy, O=OptiBuy, C=TR"
          
          echo "=== Setting up key.properties ==="
          cat >> "$CM_BUILD_DIR/android/key.properties" <<EOF
          storePassword=anyque123
          keyPassword=anyque123
          keyAlias=optibuy
          storeFile=$CM_BUILD_DIR/release.keystore
          EOF

      - name: Set up local properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"

      - name: Build AAB
        script: |
          cd android
          chmod +x gradlew
          ./gradlew clean
          ./gradlew bundleRelease
          
          echo "=== Check outputs ==="
          find . -name "*.aab" -exec ls -lh {} \;
          
          echo "=== Copy AAB ==="
          cp app/build/outputs/bundle/release/app-release.aab ../optibuy.aab
          ls -lh ../optibuy.aab

    artifacts:
      - optibuy.aab
      - android/app/build/outputs/bundle/release/app-release.aab
