workflows:
  optibuy:
    name: OptiBuy React Native - Gradle Wrapper Fixed
    max_build_duration: 90
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
        ANDROID_SDK_ROOT: /usr/local/share/android-sdk
        ANDROID_HOME: /usr/local/share/android-sdk
        JAVA_HOME: /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
    scripts:
      - name: Create React Native Project Structure
        script: |
          echo "=== Creating React Native Project Structure ==="
          
          npm install -g @react-native-community/cli
          
          echo "Creating OptiBuy directory..."
          mkdir -p OptiBuy
          cd OptiBuy
          
          npm init -y
          
          mkdir -p android/app/src/main/java/com/optibuy/collective
          mkdir -p android/app/src/main/res/values
          mkdir -p android/app/src/main/assets
          mkdir -p android/gradle/wrapper
          
          echo "Creating package.json..."
          echo '{
            "name": "OptiBuy",
            "version": "1.2.0",
            "private": true,
            "scripts": {
              "android": "react-native run-android",
              "start": "react-native start"
            },
            "dependencies": {
              "react": "18.2.0",
              "react-native": "0.72.6"
            }
          }' > package.json
          
          echo "Creating app.json..."
          echo '{
            "name": "OptiBuy",
            "displayName": "OptiBuy"
          }' > app.json
          
          echo "Creating index.js..."
          echo "import {AppRegistry} from 'react-native';
          import App from './App';
          import {name as appName} from './app.json';
          
          AppRegistry.registerComponent(appName, () => App);" > index.js
          
          echo "Creating App.tsx..."
          echo "import React from 'react';
          import {SafeAreaView, Text, StyleSheet, View} from 'react-native';
          
          function App() {
            return (
              <SafeAreaView style={styles.container}>
                <View style={styles.content}>
                  <Text style={styles.title}>OptiBuy</Text>
                  <Text style={styles.subtitle}>Collective Purchasing Platform</Text>
                  <Text style={styles.description}>Ready for Google Play Store deployment</Text>
                </View>
              </SafeAreaView>
            );
          }
          
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f8f9fa',
            },
            content: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              padding: 20,
            },
            title: {
              fontSize: 32,
              fontWeight: 'bold',
              marginBottom: 10,
              color: '#000',
            },
            subtitle: {
              fontSize: 18,
              marginBottom: 20,
              color: '#666',
            },
            description: {
              fontSize: 16,
              color: '#4CAF50',
              fontWeight: '600',
            },
          });
          
          export default App;" > App.tsx
          
          npm install
          
          echo "Directory structure created successfully"
          ls -la
          
      - name: Setup Android Configuration
        script: |
          echo "=== Setting up Android Configuration ==="
          cd OptiBuy
          
          echo "Creating Android gradle files..."
          
          echo 'rootProject.name = "OptiBuy"
          include ":app"
          
          project(":app").projectDir = new File(rootProject.projectDir, "app")' > android/settings.gradle
          
          echo 'distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.1.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists' > android/gradle/wrapper/gradle-wrapper.properties
          
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.bundle.enableUncompressedNativeLibs=false
          android.enableR8.fullMode=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.daemon=true
          MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks
          MYAPP_UPLOAD_KEY_ALIAS=upload
          MYAPP_UPLOAD_STORE_PASSWORD=optibuy_upload_2025
          MYAPP_UPLOAD_KEY_PASSWORD=optibuy_upload_2025' > android/gradle.properties
          
          echo 'buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 35
                  targetSdkVersion = 35
                  ndkVersion = "21.4.7075529"
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
                  classpath("com.facebook.react:react-native-gradle-plugin")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
                  maven { url "https://www.jitpack.io" }
              }
          }' > android/build.gradle
          
          echo 'apply plugin: "com.android.application"
          apply plugin: "com.facebook.react"
          
          react {
              entryFile = "index.js"
              enableHermes = true
              bundleInDebug = false
              bundleInRelease = true
          }
          
          android {
              ndkVersion rootProject.ext.ndkVersion
              compileSdkVersion rootProject.ext.compileSdkVersion
              
              namespace "com.optibuy.collective"
              defaultConfig {
                  applicationId "com.optibuy.collective"
                  minSdkVersion rootProject.ext.minSdkVersion
                  targetSdkVersion rootProject.ext.targetSdkVersion
                  versionCode 2
                  versionName "1.2.0"
              }
              
              signingConfigs {
                  debug {
                      storeFile file("debug.keystore")
                      storePassword "android"
                      keyAlias "androiddebugkey"
                      keyPassword "android"
                  }
                  release {
                      if (project.hasProperty("MYAPP_UPLOAD_STORE_FILE")) {
                          storeFile file(MYAPP_UPLOAD_STORE_FILE)
                          storePassword MYAPP_UPLOAD_STORE_PASSWORD
                          keyAlias MYAPP_UPLOAD_KEY_ALIAS
                          keyPassword MYAPP_UPLOAD_KEY_PASSWORD
                      }
                  }
              }
              
              buildTypes {
                  debug {
                      signingConfig signingConfigs.debug
                  }
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                  }
              }
              
              bundle {
                  language {
                      enableSplit = false
                  }
                  density {
                      enableSplit = true
                  }
                  abi {
                      enableSplit = true
                  }
              }
          }
          
          dependencies {
              implementation "com.facebook.react:react-android"
              implementation "com.facebook.react:hermes-android"
          }' > android/app/build.gradle
          
          echo '<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.optibuy.collective">
              <uses-permission android:name="android.permission.INTERNET" />
              <application android:name=".MainApplication" android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:allowBackup="false" android:theme="@style/AppTheme">
                  <activity android:name=".MainActivity" android:label="@string/app_name" android:configChanges="keyboard|keyboardHidden|orientation|screenSize|uiMode" android:launchMode="singleTask" android:windowSoftInputMode="adjustResize" android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>' > android/app/src/main/AndroidManifest.xml
          
          echo '<resources>
              <string name="app_name">OptiBuy</string>
          </resources>' > android/app/src/main/res/values/strings.xml
          
          echo "Android configuration completed"
          ls -la android/
          
      - name: Create Gradle Wrapper
        script: |
          echo "=== Creating Proper Gradle Wrapper ==="
          cd OptiBuy/android
          
          curl -o gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.1.1/gradle/wrapper/gradle-wrapper.jar
          mv gradle-wrapper.jar gradle/wrapper/
          
          echo '#!/bin/bash
          
          APP_NAME="Gradle"
          APP_BASE_NAME="${0##*/}"
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD="maximum"
          
          warn () {
              echo "$*"
          } >&2
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          } >&2
          
          # OS specific support (must be "true" or "false").
          cygwin=false
          msys=false
          darwin=false
          nonstop=false
          case "$( uname )" in                #(
            CYGWIN* )         cygwin=true  ;; #(
            Darwin* )         darwin=true  ;; #(
            MSYS* | MINGW* )  msys=true    ;; #(
            NONSTOP* )        nonstop=true ;;
          esac
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || die "Unable to determine application directory"
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS="\"-Xmx64m\" \"-Xms64m\""
          
          # Find java executable
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM AIX location
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              elif [ -x "$JAVA_HOME/bin/java" ] ; then
                  JAVACMD="$JAVA_HOME/bin/java"
              else
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no java command could be found in your PATH."
          fi
          
          # Escape application args
          save () {
              for i do printf %s\\n "$i" | sed "s/'"'"'/'"'"'\"'"'"'\"'"'"'/g;1s/^/'"'"'/;\$s/\$/ '"'"'/" ; done
              echo " "
          }
          APP_ARGS=$(save "$@")
          
          # Collect all arguments for the java command
          set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "-Dorg.gradle.appname=$APP_BASE_NAME" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
          
          exec "$JAVACMD" "$@"' > gradlew
          
          chmod +x gradlew
          
          echo "Gradle wrapper created successfully"
          ls -la gradlew
          
      - name: Create Upload Keystore
        script: |
          echo "=== Creating Upload Keystore ==="
          cd OptiBuy
          
          keytool -genkeypair \
            -alias upload \
            -keyalg RSA \
            -keysize 2048 \
            -validity 9125 \
            -keystore android/app/upload-keystore.jks \
            -dname "CN=OptiBuy Collective, OU=Mobile Apps, O=OptiBuy, L=Istanbul, ST=Istanbul, C=TR" \
            -storepass optibuy_upload_2025 \
            -keypass optibuy_upload_2025
          
          echo "Keystore created successfully"
          ls -la android/app/upload-keystore.jks
          keytool -list -v -keystore android/app/upload-keystore.jks -storepass optibuy_upload_2025 -alias upload | grep "SHA1"
          
      - name: Build React Native Bundle
        script: |
          echo "=== Building React Native Bundle ==="
          cd OptiBuy
          
          mkdir -p android/app/src/main/assets
          
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res/
          
          echo "Bundle created successfully"
          ls -la android/app/src/main/assets/
          
      - name: Build AAB for Google Play Console
        script: |
          echo "=== Building AAB for Google Play Console ==="
          cd OptiBuy/android
          
          echo "Gradle wrapper verification:"
          ls -la gradlew
          which java
          echo "JAVA_HOME: $JAVA_HOME"
          
          chmod +x gradlew
          
          echo "Running gradle clean..."
          ./gradlew clean --stacktrace
          
          echo "Building AAB bundle..."
          ./gradlew bundleRelease --stacktrace
          
          echo "=== AAB Build Verification ==="
          find . -name "*.aab" -type f
          ls -la app/build/outputs/bundle/release/ || echo "Release directory not found"
          
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
              echo "AAB file created successfully"
              file app/build/outputs/bundle/release/app-release.aab
              
              cd ../..
              cp OptiBuy/android/app/build/outputs/bundle/release/app-release.aab ./optibuy-google-play-ready.aab
              cp OptiBuy/android/app/build/outputs/bundle/release/app-release.aab ./optibuy-$(date +%Y%m%d-%H%M).aab
              
              echo "=== GOOGLE PLAY CONSOLE UPLOAD READY ===" > google_play_deployment.txt
              echo "Package: com.optibuy.collective" >> google_play_deployment.txt
              echo "Version Code: 2" >> google_play_deployment.txt
              echo "Version Name: 1.2.0" >> google_play_deployment.txt
              echo "Upload Key SHA-1: 80:71:B8:94:5A:40:B2:83:2C:99:3C:9E:E1:3D:E6:2A:D3:71:4E:50" >> google_play_deployment.txt
              echo "Target SDK: 35 (Android 15)" >> google_play_deployment.txt
              echo "Status: Ready for Google Play Console Upload" >> google_play_deployment.txt
              
              echo "AAB generation completed successfully!"
              ls -la *.aab
          else
              echo "ERROR: AAB file not generated"
              echo "Checking all build outputs:"
              find OptiBuy/android -name "*.aab" -type f
              exit 1
          fi
          
    artifacts:
      - "*.aab"
      - "OptiBuy/android/app/build/outputs/bundle/release/app-release.aab"
      - "OptiBuy/android/app/upload-keystore.jks"
      - "google_play_deployment.txt"
    publishing:
      email:
        recipients:
          - build@optibuy.com
        notify:
          success: true
          failure: true
