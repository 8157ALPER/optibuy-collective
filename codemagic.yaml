workflows:
  android-workflow:
    name: OptiBuy Android AAB Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - android_signing
      vars:
        PACKAGE_NAME: "com.optibuy.collective"
      node: 22.12.0
    scripts:
      - name: Analyze and restructure repository
        script: |
          echo "=== Repository Analysis ==="
          ls -la
          echo "=== Creating proper project structure ==="
          
          # Create necessary directories
          mkdir -p client/src client/public
          mkdir -p server shared dist/public
          
          # Create basic index.html for client
          cat > client/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>OptiBuy</title>
            </head>
            <body>
              <div id="root"></div>
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
          # Move React/TypeScript files to client/src
          echo "Moving React files to client/src..."
          for file in *.tsx *.ts *.jsx *.js; do
            if [ -f "$file" ] && [ "$file" != "vite.config.ts" ] && [ "$file" != "tailwind.config.ts" ]; then
              mv "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          # Move CSS files
          for file in *.css; do
            if [ -f "$file" ]; then
              mv "$file" client/src/ 2>/dev/null || true
            fi
          done
          
          # Handle components directory
          if [ -d "components" ]; then
            mv components client/src/ 2>/dev/null || true
          fi
          
          # Handle UI components in root
          mkdir -p client/src/components/ui
          for file in *.tsx; do
            if [ -f "$file" ]; then
              mv "$file" client/src/components/ui/ 2>/dev/null || true
            fi
          done
          
          echo "=== Final structure ==="
          find client -type f | head -20
          
      - name: Create client package.json
        script: |
          cat > client/package.json << 'EOF'
          {
            "name": "optibuy-client",
            "version": "1.0.0",
            "type": "module",
            "scripts": {
              "build": "vite build --outDir ../dist/public",
              "dev": "vite",
              "preview": "vite preview"
            },
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@types/react": "^18.2.66",
              "@types/react-dom": "^18.2.22",
              "wouter": "^3.3.5",
              "@tanstack/react-query": "^5.51.23",
              "@hookform/resolvers": "^3.9.0",
              "react-hook-form": "^7.52.2",
              "zod": "^3.23.8",
              "lucide-react": "^0.427.0",
              "clsx": "^2.1.1",
              "tailwind-merge": "^2.5.2",
              "class-variance-authority": "^0.7.0"
            },
            "devDependencies": {
              "@vitejs/plugin-react": "^4.3.1",
              "vite": "^5.4.0",
              "typescript": "^5.5.3",
              "tailwindcss": "^3.4.9",
              "autoprefixer": "^10.4.20",
              "postcss": "^8.4.41"
            }
          }
          EOF
          
      - name: Create vite config for client
        script: |
          cat > client/vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          import path from 'path'
          
          export default defineConfig({
            plugins: [react()],
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
              },
            },
            build: {
              outDir: '../dist/public',
              emptyOutDir: true,
            },
          })
          EOF
          
      - name: Install dependencies
        script: |
          echo "=== Installing root dependencies ==="
          npm install
          echo "=== Installing client dependencies ==="
          cd client
          npm install
          cd ..
          
      - name: Build web assets
        script: |
          echo "=== Building web assets ==="
          cd client
          npx vite build
          cd ..
          echo "=== Build output ==="
          ls -la dist/public/
          
      - name: Setup Android signing
        script: |
          echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
          
      - name: Add Android platform
        script: |
          npx cap add android
          
      - name: Sync Capacitor
        script: |
          npx cap sync android
          
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
          
      - name: Build Android AAB
        script: |
          cd android
          ./gradlew bundleRelease
          
      - name: Display build info
        script: |
          echo "=== AAB Build Complete ==="
          find android/app/build/outputs -name "*.aab" -exec ls -lh {} \;
          echo "Download the AAB file from artifacts and manually upload to Google Play Console"
          
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/mapping.txt

  ios-workflow:
    name: OptiBuy iOS Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.optibuy.collective
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
      node: 22.12.0
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install dependencies
        script: |
          npm ci
      - name: Build web assets
        script: |
          npm run build
      - name: Add iOS platform
        script: |
          npx cap add ios
      - name: Sync Capacitor
        script: |
          npx cap sync ios
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
